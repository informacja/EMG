function s1 = super (s1, s2, a, c);% Adds together two sigs.% Copyright (c) 2006-2009. Kevin C. McGill and others.% Part of EMGlab version 1.0.% This work is licensed under the Aladdin free public license.% For copying permissions see license.txt.% email: emglab@emglab.net	if nargin<3; a = 0; end;		%	[sig1, start1, dt1, type1] = sigsep (s1);%	[sig2, start2, dt2, type2] = sigsep (s2);	sig1 = s1.sig;	start1 = s1.t0;	dt1 = s1.dt;	sig2 = s2.sig;	start2 = s2.t0;	dt2 = s2.dt;%	type1 = s1.type;	if dt2>dt1; error('S2 sampling rate must be >= S1 sampling rate.'); end;		start2 = start2 + a;	ibeg1 = ceil ((start2 - start1)/dt1);	ibeg1 = max (ibeg1, 0);	if ibeg1 > length(sig1); return; end;		tbeg = start1 + ibeg1*dt1;	ibeg2 = round ((tbeg-start2) / dt2);	if ibeg2 > length(sig2); return; end;	if abs(tbeg - start2 - ibeg2*dt2) > dt1/20;		sig2 = irtp (hr_shift(rtp(sig2), tbeg - start2));		i2 = 0;	end;	n = round (dt1 / dt2);	x = sig2 (ibeg2+1:n:end);	k = min (length(x), length(sig1) - ibeg1);    y = sig1(ibeg1+1:ibeg1+k) + c * x(1:k);    sig1(ibeg1+1:ibeg1+k) = y;           yy = sparse (length(sig1),1);    yy(ibeg1+1:ibeg1+k) = y;    yy = sig1 + yy;            zz = sparse ([ibeg1+1:ibeg1+k], 1, c*x(1:k), length(sig1), 1);    zz = sig1 + zz;               sig1(ibeg1+1:ibeg1+k) = y;    s1 = struct ('t0', s1.t0, 'dt', s1.dt, 'sig', sig1);%    s1.sig = sig1;	%	if type1;%		s1.sig = sig1;%	else%		s1 = sig1;%	end;