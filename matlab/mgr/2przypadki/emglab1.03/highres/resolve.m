function [d, e, fx] = resolve (x, c, d)% Resolve superposition.% Copyright (c) 2006-2009. Kevin C. McGill and others.% Part of EMGlab version 1.0.% This work is licensed under the Aladdin free public license.% For copying permissions see license.txt.% email: emglab@emglab.net	[lx, n] = size(c);	if n==0; d = []; return; end;		if nargin==2;		[C, E] = crosscorr ([-x,c]);		d = fitdt (2*C, E, inf);	%%% KCM 9/20/06	end;	d = fitct (x, c, d);		d = mod (d, lx);	i = find(d>lx/2);	d(i) = d(i) - lx;%	Compute the best fitting template sum and the squared error	if nargout>1;		fx = comp(c,d);		e = x - fx;		e = sum(e.^2);	end;				function d = fitct (xp, cp, d);	[b, n] = size(cp);	[c, lx, l2] = rtp_to_dft (cp);	x = rtp_to_dft(xp);	e = inf;	w = [0:l2-1]' * 2*pi/(l2-1);	S = zeros(l2, n);	ix = 1;	icount = 0;	while (e > 0.05/n & icount<100);		t = oshift (c, d, lx);		dd = (x - ocomp(c,d,lx)).*w;		for i=1:n;			S(:,i) = t(:,i).*w;			k(i) = real(dd'*S(:,i));		end;		H = real(S'*S) /2 + diag(k)/2;		g = imag(t'*dd);		[U,E] = eig(H);		HI = U*diag(1./abs(diag(E)))*U';		s = HI*imag(t'*dd);		e = norm(s)*ix;		if e > 1;			s = s / e;		end;		d = d(:) - s(:);		icount = icount + 1;		ix = 1 + .1/icount;	end;function Y = ocomp (X, d, lx);% compose signal from temps and shifts	Y = sum(oshift(X,d,lx), 2);function c2 = oshift (c1, d, lx);	[l,n] = size(c1);	if length(d)==1;		d = d*ones(1,n);	end;	dom = [0:l-1]' * d(:)' * 2 * pi / lx;	c2 = c1.*(cos(dom) - j*sin(dom));	function [dBest, eBest] = fitdt (G, E, eBest);% general solver for any size S.	dBest = [];	[l, w] = size(G);	if w==1;		[e, d] = min(G);		if e < eBest;			eBest = e;			dBest = d - 1;		end;	else		n = (sqrt(8*w+1)-1)/2;		[b, iswap] = max(E(1:n+1));		if iswap>1;			[G, E] = rearrange (G, E, iswap);		end;		[Gmin, Gminp] = min (G(:,1:n));		es1 = E(1) - sum(E(2:n+1));		while (sum(Gmin)+es1 < eBest);			[b,i] = min(Gmin);				a = Gminp(i)-1;			[G1, ec] = collapse (G, i, a);			E1 = [E(1)+E(i+1)+ec, E(2:i), E(i+2:length(E))];			[d, e] = fitdt (G1, E1, eBest-ec);			if e < eBest-ec;				if i<=n;					dBest = [d(1:i-1), a, d(i:n-1)];				else					[ii,jj] = guncoef (i, n);					dBest = [d(1:jj-1), d(ii)+a, d(jj:n-1)];				end;				eBest = e+ec;			end;			G(a+1,i) = inf;			[Gmin(i),Gminp(i)] = min(G(:,i));		end;		if length(dBest)>0 & iswap>1;			d = [dBest(iswap-1), dBest(1:iswap-2), 0, dBest(iswap:n)];			dBest = d(2:n+1) - d(1);		end;	end;function [g1, e1] = rearrange (g, e, is);	g1 = g;	e1 = e;	if is > 1;		e1(1)  = e(is);		e1(is) = e(1);		[l,w] = size(g);		r = [1, l:-1:2];		n = (sqrt(8*w+1)-1)/2;		is = is - 1;		for i=1:n;			if i<is;				p = gcoef (i, is, n);				g1(:,p) = g(r,i);				g1(:,i) = g(r,p);			elseif i==is;				g1(:,i) = g(r,i);			else				p = gcoef (is, i, n);				g1(:,p) = g(:,i);				g1(:,i) = g(:,p);			end;		end;	end;	function k = gcoef (i, j, n);	if i==j;		k = i;	elseif j>i;		k = (i*(2*n-i)-i) / 2 + j;	else		k = -((j*(2*n-j)-j) / 2 + i);	end;function [i, j] = guncoef (k, n);	t = 2*n+1;	i = floor ( (t - sqrt(t^2 + 8*(1-k)) )/2 );	j = k - (i*(2*n-i)-i)/2;function [G1,v] = collapse (G, nr, a);	[l, w] = size (G);	a = a - floor(a/l)*l;	v = G(a+1,nr);	if w==3;	if nr==1;		j = [l+1-a:l, 1:l-a];		G1 = G(:,2) + G(j,3);		elseif nr==2;		j = [a+1:-1:1, l:-1:a+2];		G1 = G(:,1) + G(j,3);	else		j = [a+1:l, 1:a];		G1 = G(:,1) + G(j,2);		end;	elseif w==6;	if nr ==1;		G1 = G(:,[2,3,6]);		jt = [l+1-a:l, 1:l-a];		G1(:,1) = G1(:,1) + G(jt,4);		G1(:,2) = G1(:,2) + G(jt,5);	elseif nr==2;		G1 = G(:,[1,3,5]);		jt = [l+1-a:l, 1:l-a]; 		jr = [a+1:-1:1, l:-1:a+2];		G1(:,1) = G1(:,1) + G(jr, 4);		G1(:,2) = G1(:,2) + G(jt, 6);	elseif nr==3;		G1 = G(:,[1,2,4]);		jr = [a+1:-1:1, l:-1:a+2];		G1(:,1) = G1(:,1) + G(jr,5);		G1(:,2) = G1(:,2) + G(jr,6);	elseif nr==4;		G1 = G(:,[1,3,5]);		jt = [l+1-a:l, 1:l-a]; 		ju = [a+1:l, 1:a];		G1(:,1) = G1(:,1) + G(ju, 2);		G1(:,3) = G1(:,3) + G(jt, 6);	elseif nr==5;		G1 = G(:,[1,2,4]);		jr = [a+1:-1:1, l:-1:a+2];		ju = [a+1:l, 1:a];		G1(:,1) = G1(:,1) + G(ju,3);		G1(:,3) = G1(:,3) + G(jr,6);	elseif nr==6;		G1 = G(:,[1,2,4]);		ju = [a+1:l, 1:a];		G1(:,2) = G1(:,2) + G(ju,3);		G1(:,3) = G1(:,3) + G(ju,5);	end;		elseif w==10;	if nr==1;		G1 = G(:,[2,3,4,8,9,10]);		jt = [l+1-a:l, 1:l-a]; 		G1(:,1) = G1(:,1) + G(jt,5);		G1(:,2) = G1(:,2) + G(jt,6);		G1(:,3) = G1(:,3) + G(jt,7);	elseif nr==2;		G1 = G(:,[1,3,4,6,7,10]);		jt = [l+1-a:l, 1:l-a]; 		jr = [a+1:-1:1, l:-1:a+2];		G1(:,1) = G1(:,1) + G(jr,5);		G1(:,2) = G1(:,2) + G(jt,8);		G1(:,3) = G1(:,3) + G(jt,9);	elseif nr==3;		G1 = G(:,[1,2,4,5,7,9]);		jt = [l+1-a:l, 1:l-a]; 		jr = [a+1:-1:1, l:-1:a+2];		G1(:,1) = G1(:,1) + G(jr,6);		G1(:,2) = G1(:,2) + G(jr,8);		G1(:,3) = G1(:,3) + G(jt,10);	elseif nr==4;		G1 = G(:,[1,2,3,5,6,8]);		jr = [a+1:-1:1, l:-1:a+2];		G1(:,1) = G1(:,1) + G(jr,7);		G1(:,2) = G1(:,2) + G(jr,9);		G1(:,3) = G1(:,3) + G(jr,10);	elseif nr==5;		G1 = G(:,[1,3,4,6,7,10]);		jt = [l+1-a:l, 1:l-a]; 		ju = [a+1:l, 1:a];		G1(:,1) = G1(:,1) + G(ju,2);		G1(:,4) = G1(:,4) + G(jt,8);		G1(:,5) = G1(:,5) + G(jt,9);	elseif nr==6;		G1 = G(:,[1,2,4,5,7,9]);		jt = [l+1-a:l, 1:l-a]; 		jr = [a+1:-1:1, l:-1:a+2];		ju = [a+1:l, 1:a];		G1(:,1) = G1(:,1) + G(ju,3);		G1(:,4) = G1(:,4) + G(jr,8);		G1(:,5) = G1(:,5) + G(jt,10);	elseif nr==7;		G1 = G(:,[1,2,3,5,6,8]);		jr = [a+1:-1:1, l:-1:a+2];		ju = [a+1:l, 1:a];		G1(:,1) = G1(:,1) + G(ju,4);		G1(:,4) = G1(:,4) + G(jr,9);		G1(:,5) = G1(:,5) + G(jr,10);	elseif nr==8;		G1 = G(:,[1,2,4,5,7,9]);		jt = [l+1-a:l, 1:l-a]; 		ju = [a+1:l, 1:a];		G1(:,2) = G1(:,2) + G(ju,3);		G1(:,4) = G1(:,4) + G(ju,6);		G1(:,6) = G1(:,6) + G(jt,10);	elseif nr==9;		G1 = G(:,[1,2,3,5,6,8]);		jr = [a+1:-1:1, l:-1:a+2];		ju = [a+1:l, 1:a];		G1(:,2) = G1(:,2) + G(ju,4);		G1(:,4) = G1(:,4) + G(ju,7);		G1(:,6) = G1(:,6) + G(jr,10);	elseif nr==10;		G1 = G(:,[1,2,3,5,6,8]);		ju = [a+1:l, 1:a];		G1(:,3) = G1(:,3) + G(ju,4);		G1(:,5) = G1(:,5) + G(ju,7);		G1(:,6) = G1(:,6) + G(ju,9);	end;	else;			n = (sqrt(8*w+1)-1)/2;	G1 = zeros(l, ((n-1)^2+n-1)/2);	[ir, jr] = guncoef(nr, n);	ip = 0;	ip1 = 0;	for i = 0:n;		if i==jr;			ip = ip+n-i;		elseif i==ir;			for j = i+1:n;				ip = ip+1;				if jr>j;					ip1 = ip1+1;					k = gcoef(j, jr, n);					G1(:,ip1) = G(:,ip) + shiftr(G(:,k), a);				elseif j>jr					ip1 = ip1+1;					k = gcoef(jr, j, n);					G1(:,ip1) = G(:,ip) + shiftt(G(:,k), a);				elseif j==jr;				end;			end;		else;			for j = i+1:n;				ip = ip + 1;				if j==jr;				elseif j==ir;					ip1 = ip1+1;					k = gcoef(i, jr, n);					G1(:,ip1) = G(:,ip) + shiftt(G(:,k), -a);				else					ip1 = ip1+1;					G1(:,ip1) = G(:,ip);				end;			end;		end;	end;end;function y = shiftt (x, d);	[n,b] = size(x);	d = d-floor(d/n)*n;	y = [x(n+1-d:n,:); x(1:n-d,:)];	function y = shiftr (x, d);	[n,b] = size(x);	d = d - floor(d/n)*n;	y = [x(d+1:-1:1,:); x(n:-1:d+2,:)];	