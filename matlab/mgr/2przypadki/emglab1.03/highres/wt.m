function w = wt (x, L, opt);% WT   Forward wavelet transform.%	WT(X,L) is the L-level wavelet transform of X. If X is a matrix,%	the transform is applied to each column.%%	X can be any length longer than 2^(L+1). The 4-th order symmlet %	is used. X is edge padded, and the wavelet coefficients are %	truncated so that W has the same length as X.%%	WT(X,L,1) computes the full set of "spin-cycled" coefficients.%	In this case X must be a vector, and the output has L+1 columns.%%   Loosely based on wavelab (www-stat.stanford.edu/~wavelab/)% Copyright (c) 2006-2009. Kevin C. McGill and others.% Part of EMGlab version 1.0.% This work is licensed under the Aladdin free public license.% For copying permissions see license.txt.% email: emglab@emglab.net	if length(x) < 2^(L+1);		error ('Input length must be at least 2^(L+1).');	end;	[q, qr, qm, ld, rd, la, ra] = get_constants;		  	if nargin==2; % Normal transform        w = [];        z = zeros (7, size(x,2));        for j=1:L;            l = size(x,1);            x = [x; z];            d = filter (qm, 1, x);            d(4:7,:) = d(4:7,:) + ld*x(1,:);            d(l+1:l+3,:) = d(l+1:l+3,:) + rd*x(l,:);            w = [w; d(5:2:end-4,:)];            a = filter (qr, 1, x);            a(5:7,:) = a(5:7,:) + la*x(1,:);            a(l+1:l+4,:) = a(l+1:l+4,:) + ra*x(l,:);            x = a(5:2:end-3,:);        end;        w = [w; x];        		else	% Spin-cycle transform		if size(x,2)>1;			error ('Input must be a vector for spin-cycle transform.');		end;		w = zeros(length(x),L+1);		for j=1:L;			s = 2^(j-1);			for k=0:s-1;				y = x(k+1:s:end);				l = length(y);				d = conv (qm, y);				d(4:7) = d(4:7) + ld*y(1);				d(l+1:l+3) = d(l+1:l+3) + rd*y(l);				w(k+1:s:end,j) = d(4:l+3)/2;				a = conv (qr, y);				a(5:7) = a(5:7) + la*y(1);				a(l+1:l+4) = a(l+1:l+4) + ra*y(l);				x(k+1:s:end) = a(5:l+4)/2;			end; 		end;		w(:,L+1) = x;	end;function [q, qr, qm, ld, rd, la, ra] = get_constants ();	q = [ -0.07576571478934; -0.02963552764595;  0.49761866763246; ...		   0.80373875180522;  0.29785779560554; -0.09921954357694; ...		  -0.01260396726226;  0.03222310060407];	qr = q(end:-1:1);	qm = q.*[1;-1;1;-1;1;-1;1;-1];		  	ld = [ 0.35225027131614;  0.05439247571060; -0.04482706786633; ...		  -0.03222310060407]; 	rd = [-0.07576571478934; -0.04613018714339;  0.45148848048907];			la = [ 0.39221742519716; -0.10540124243529; -0.07576571478934];		 	ra = [ 0.03222310060407;  0.01961913334181; -0.07960041023513; ...		   0.21825738537042];