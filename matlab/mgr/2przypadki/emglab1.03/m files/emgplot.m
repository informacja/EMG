function emgplot (option, p1, p2)% EMGlab plotting function.% Copyright (c) 2006-2009. Kevin C. McGill and others.% Part of EMGlab version 1.0.% This work is licensed under the Aladdin free public license.% For copying permissions see license.txt.% email: emglab@emglab.net	global SETS DECOMP CURR EMG SCREEN EMGLAB	if isempty (EMGLAB.figure); return; end;	if nargin==0; 		option = 'entire window'; 	elseif iscell(option);		for i=1:length(option);			emgplot (option{i});		end;		return;	end;	C = SETS.colors;       	switch option		case 'busy';         set(SCREEN.figure,'Pointer','watch');        drawnow;	case 'done';         set(SCREEN.figure,'Pointer','arrow');	case {'signal'}		K = SCREEN.signal;		S = SETS.signal;			if isempty (K.axes); return; end;		if isempty (EMG.data); 			myerase (K.axes);            return;		end;		[t0, t1] = whattime (S);		[sig, t] = emgsignal (t0, t1);        SETS.signal = mysetup (K, S, SETS.navigation.sensitivity(CURR.chan, CURR.band));                myplot (K.signal, SETS.signal, [0,0], t, sig);        auxplot (K.aux, SETS.signal);        plotscale (K, SETS.signal, 'major', 'medium', ...            {'x', -1, 1, 'above'}, ...            {'x', 1, -1, 'none'}, ...            {'y', 0, 1, 'none'}, ...            {'y', 10, -1, 'left'});         emgplot ('signal annotation', 'nodraw');        emgplot ('signal cursor');         mydraw (K.axes);                units = EMG.channel(CURR.chan).units;        if strcmp (units, 'ADC units');            set (SCREEN.info.emgsens, 'string', ' ');        else            set (SCREEN.info.emgsens, 'string', units);        end;              case 'emgseg'		K = SCREEN.signal;		S = SETS.signal;			if isempty (K.axes); return; end;		[sig, t] = emgsignal (p1, p2);                myplot (K.signal, S, [0,0], t, sig);		[res, t] = emgresidual (p1, p2, CURR.band, 1);        myplot (K.resid, S, [0,-.7], t, res);	case 'info'        if isempty (EMG.data); return; end;        set (SCREEN.info.channel, 'value', CURR.chan);        set (SCREEN.info.filter, 'value', CURR.band);        emgfile = EMGLAB.emg_file;		[path, file, ext] = fileparts (emgfile);              set_text (SCREEN.info.filename, ...            {['Signal: ', file, ext], ['Sig: ', file], C.backgr_text});		set (SCREEN.info.filename, 'tooltip', emgfile);        ann_file = CURR.annot_file;        if isempty (ann_file);            str = 'untitled';        else            [path, file1, ext1] = fileparts (ann_file);            str = [file1, ext1];        end;        if ~isempty(CURR.compare_file);            [path, file2, ext2] = fileparts (CURR.compare_file);            str2 = [file2, ext2];        end;        [c1, c2] = pickcolor(0, SETS.colors);        if CURR.compare & ~CURR.swap            s1 = str;            s2 = [' vs ', str2];        elseif CURR.compare & CURR.swap;            s1 = str2;            s2 = [' vs ', str];        elseif CURR.swap & ~CURR.compare;            s1 = str2;            s2 = ' ';        else            s1 = str;            s2 = ' ';        end;        set_text (SCREEN.info.annotation, ...            {'Annotation: ', 'Ann: ', C.backgr_text;             s1, s1, c1;             s2, s2, c2});					case 'signal annotation'		K = SCREEN.signal;		S = SETS.signal;		if isempty (K.axes); return; end;        myerase (K.text);		if isempty(EMG.data) | isempty(DECOMP.slist);            myerase ([K.resid; K.text(:); K.bar]);			return; 		end;		[t0, t1] = whattime (S);        [res, t] = emgresidual (t0, t1, CURR.band, 1);        myplot (K.resid, S, [0,-.7], t, res);                if ~CURR.compare                                 sl = emgslist (0, t0, t1);            n = size(sl,1);            if length(K.text)<n;                SCREEN.signal.text = get_more_handles (K.text, n);                K = SCREEN.signal;            end;                    for i=1:n;                unit = sl(i,2);                x = S.left + (sl(i,1)-t0)/S.timebase;                mytext (K.text(i), S, [0, 0.8], sl(i,1), 0, sprintf ('%i', unit), ...                    'user', unit, 'color', pickcolor(unit, C), 'fontw', 'norm');            end;        else            pos = get (K.axes, 'pos');            xlim = get (K.axes, 'xlim');            pixel = (xlim(2) - xlim(1)) / pos(3);            [c1, c2] = pickcolor (0, C);                        [s, a, n] = sldiff (emgslist, DECOMP.compare_slist, t0, t1, 0, inf);            if length(K.text) < 2*(length(a));                SCREEN.signal.text = get_more_handles (K.text, 2*(length(a)));                K = SCREEN.signal;            end;                            n=0;             for i=1:length(a);                iu = s(i,2);                bold = 0;                if a(i)==0 & iu==CURR.unit;                    c = C.selection;                elseif a(i)==0;                    c = c1;                elseif a(i)==1 & ~DECOMP.unit(iu).visible                    c = c1;                elseif a(i)==-1 & ~DECOMP.unit(iu).visible                    c = c2;                elseif a(i)==1 & iu==CURR.unit;                    c = C.selection;                    bold = 1;                elseif a(i)==1;                    c = c1;                    bold = 1;                else                    c = c2;                    bold = 1;                end;                h = 0.8;                if bold                    n = n+1;                    mytext (K.text(n), S, [pixel, h], s(i,1), 0, sprintf ('%i', iu), ...                        'user', iu, 'color', c);                else                    c = 0.5*c + 0.5*C.panel;                end;                n = n+1;                mytext (K.text(n), S, [0, h], s(i,1), 0, sprintf ('%i', iu), ...                    'user', iu, 'color', c);             end;        end;                myerase (K.text(n+1:end));               		e = firingtimes (CURR.unit, t0, t1);        if isempty(e);            myerase (K.bar);        else            e = [e, nan*ones(size(e(:,1)))]';            e = e(:);            myplot (K.bar, S, [0,.9], e, 0*e, 'col', C.selection);        end;        if nargin==1;            mydraw (K.axes);        end;	case 'signal cursor'		K = SCREEN.signal;		S = SETS.signal;		if isempty (K.axes); return; end;		if ~strcmp(SETS.closeup.style, 'normal');             myerase (K.cursor);        else			draw_cursor (K.cursor, S, SETS.closeup, [-1, 1], 'draw', K.frame);        end;	case 'templates'		K = SCREEN.template;		S = SETS.template;		if isempty (K.axes); return; end;        if DECOMP.nunits == 0;             myerase (K.axes);            myerase (SCREEN.tempcursor.axes);			return;         end;        SETS.template = mysetup (K, S, SETS.signal.sensitivity (CURR.chan, CURR.band));        S = SETS.template;		nrows = ceil (S.display/10);		ncols = mod (S.display-1, 10) + 1;		gap = 1 / ncols;		width = (S.right - (ncols-1)*gap) / ncols;		t0 = -S.timebase*width/2;		t1 = S.timebase*width/2;		textY = .1;		textX = .05 * width;        nu = min (DECOMP.nunits - S.first_unit, nrows*ncols - 1);        switch S.style            case {'cascade', 'shimmer'};                [ft0, ft1] = whattime (SETS.firing);                resid = emgresidual(ft0, ft1, CURR.band, 1);        end;                		for ix = 0: nu;			iu = S.first_unit + ix;			[y, t] = emgtemp (iu, 'interp', t0, t1);			icol = mod (ix, ncols);			irow = floor (ix / ncols);			xoff = icol*(width + gap);            yoff = S.bottom + (1-(2*irow+1)/(2*nrows))*(S.top - S.bottom);			col = pickcolor (iu, C);            switch S.style;                case {'cascade', 'shimmer'}                    u = emgslist (iu, ft0, ft1);                    if strcmp (S.style, 'cascade');                        rastoff = S.sensitivity(CURR.chan,CURR.band) * (S.top - S.bottom) * ((ft1 - u) / 2 /(ft1-ft0) -0.25) / nrows;                        textY = -.6*S.top/nrows;                    else                        rastoff = 0*u;                    end;                    if ~isempty(u);                        y = y(1:10:end);                        t = t(1:10:end);                        s = sigseg (resid, u, t1-t0, 'c');          %              s = irtp(rtp(s.sig),10);                        s = s.sig;                        l = min(size(s,1), size(y,1));                                                s = s(1:l,:) + repmat(y(1:l), 1, length(u)) + repmat(rastoff(:)', l, 1);                        s(end+1,:) = nan;                        t = repmat (t(1:l), 1, length(u));                        t(end+1,:) = nan;                        y = s(:);                        t = t(:);                    else                        y = [];                        t = [];                    end;            end;                        myplot (K.signal(ix+1), S, [xoff+width/2, yoff], t, y, 'col', col);                  mytext (K.text(ix+1), S, [textX+xoff, textY+yoff], 0, 0, ...				sprintf ('%i', iu), 'color', col, 'tag', 'unit', 'user', iu);		end;        myerase (K.signal(nu+2:end));        myerase (K.text(nu+2:end));        mydraw (K.axes);        K = SCREEN.tempcursor; 		if isempty (K.axes); return; end;        u = get(SCREEN.tempcursor.axes, 'user');        if isempty(u); u=[0;0;0;0]; end;        if u(3)~=DECOMP.nunits;            SETS.tempcursor.timebase = 1;            SETS.tempcursor = mysetup (K, SETS.tempcursor, DECOMP.nunits, 0);            emgplot ('template cursor');                   mydraw (SCREEN.tempcursor.axes);        else            emgplot ('template cursor');        end;     case 'template cascade'        if strcmp (SETS.template.style, 'normal'); return; end;        emgplot ('templates');             case 'template cursor'        K = SCREEN.tempcursor;         T = SETS.template;		S = SETS.tempcursor;        C = SETS.colors;		if isempty (K.axes); return; end;        set (SCREEN.tempcursor.cursor, 'facecolor', .5*pickcolor(0,C) + .5*C.panel);        if T.first_unit==1 & T.first_unit + DECOMP.nunits -1 <= T.display;            myerase (K.cursor);            mydraw (K.axes);        else			y = 1-[T.first_unit-1, T.first_unit + T.display-1]/DECOMP.nunits;			draw_cursor (K.cursor, S, [0.3,0.7], y, 'draw', K.frame);		end;        	case 'template colors' 		K = SCREEN.template;		S = SETS.template;		if isempty (K.axes); return; end;		if DECOMP.nunits == 0; return; end;		nrows = ceil (S.display/10);		ncols = mod (S.display-1, 10) + 1;		for ix = 0: min (DECOMP.nunits - S.first_unit, nrows*ncols - 1);			iu = S.first_unit + ix;			col = pickcolor (iu, C);			set (K.signal(ix+1), 'col', col);			set (K.text(ix+1), 'color', col);		end;           			case 'firing'		K = SCREEN.firing;		S = SETS.firing;        SETS.firing.discount = 0;		if isempty (K.axes); return; end;		if isempty (EMG.data); 			myerase (K.axes);            set (K.lowpass, 'vis', 'off');            return;		end;        if CURR.compare;            style = 'diff';        else            style = S.style;        end;        switch style		case {'normal', 'diff'}            set (K.lowpass, 'vis', 'off');			T = SETS.template;			n = max (T.display, 10);			if T.display >= 10;				i1 = T.first_unit;			else				i1 = T.first_unit + floor(T.display/2) - 5;				i1 = min (i1, DECOMP.nunits - n + 1);				i1 = max (i1, 1);			end;			i2 = min (i1+n-1, DECOMP.nunits);			ilim = max (i2+2, i1+11);            mysetup (K, S, ilim, i1-1);            plotscale (K, S, 'major', 'none', ...                {'x', 0, 1, 'above'}, ...                {'x', 1, -1, 'none'});            		case 'ifr'            set (K.lowpass, 'vis', 'on');            mysetup (K, S, 0, S.sensitivity);            plotscale (K, S, 'major', 'medium', ...                {'x', 0, 1, 'above'}, ...                {'x', 1, -1, 'none'}, ...                {'y', 0, 1, 'left'}, ...                {'y', 10, -1, 'none'});            myerase (K.text);         end;        if isempty(DECOMP.slist) & ~CURR.compare;             myerase (K.pattern);            myerase (K.text);            emgplot ('firing cursors');            auxplot (K.aux, S);            mydraw (K.axes);        else            auxplot (K.aux, S);            emgplot ('firing patterns');        end;            case 'firing patterns'		K = SCREEN.firing;		S = SETS.firing;		if isempty (K.axes); return; end;		if isempty (EMG.data); 			myerase (K.axes);            return;		end;		[t0, t1] = whattime (S);                if CURR.compare;            style = 'diff';        else            style = S.style;        end;        switch style		case 'normal'			T = SETS.template;            u = get (K.axes, 'user');            i1 = u(4) + 1;			n = max (T.display, 10);			i2 = min (i1+n-1, DECOMP.nunits);            ilim = u(3);            sl = emgslist (0, t0, t1);            if ~isempty(sl);                sl = sl(sl(:,2)>=i1 & sl(:,2)<=i2,:);            else                sl = [nan, nan];            end;			po = get(K.axes, 'pos');			margin = 3/po(3) * (t1-t0);            			for i=i1:i2;				ix = find(sl(:,2)==i);				col = pickcolor (i, C);                x = sl(ix,1);                y = 1-(i-i1+1)/(ilim-i1+1);                if i==CURR.unit;    %                myerase (K.pattern(i-i1+1));                 else                    myplot (K.pattern(i-i1+1), S, [0,0], x, i+0*x, 'color', col, ...                        'linestyle', 'none', 'marker', 'o', 'markersize', 6);                end;                mytext (K.text(i-i1+1), S, [-.02, 0], t0, i, sprintf ('%i', i), ...					'hor', 'r', 'vert', 'm', ...					'fontsize', 10, 'color', col, 'tag', 'firing text', 'user', i);			end;			if strcmp (SETS.closeup.style, 'merge');				u2 = DECOMP.closeup.comp(1).unit;				ix = find(sl(:,2)==u2);                y = 1 - (CURR.unit-i1+1)/(ilim-i1);                myplot (K.pattern(u2-i1+1), S, [0,0], sl(ix,1), 0*ix+CURR.unit, ...                    'linestyle', 'none', 'marker', 'o', 'markersize', 6);            end;            if CURR.unit>=i1 & CURR.unit<=i2;				ix = find(sl(:,2)==CURR.unit);                y = 1 - (CURR.unit-i1+1)/(ilim-i1);                myplot (K.pattern(CURR.unit-i1+1), S, [0,0], sl(ix,1), CURR.unit+0*ix, ...                    'linestyle', 'none', 'marker', 'o', 'markersize', 6, 'color', C.selection);            end;            myerase (K.pattern(i2-i1+2:end));            myerase (K.text(i2-i1+2:end));            myerase (K.extra);			emgplot ('firing cursors');            mydraw (K.axes);        case 'diff'            pos = get (K.axes, 'pos');            xlim = get (K.axes, 'xlim');            half_pixel = (xlim(2) - xlim(1)) / pos(3) / 2;			T = SETS.template;            u = get (K.axes, 'user');            i1 = u(4) + 1;			n = max (T.display, 10);            i2 = i1+n-1;                        [c1, c2] = pickcolor (0, C);            c3 = C.selection;             [s, a, n] = sldiff (emgslist, DECOMP.compare_slist, t0, t1, i1, i2);                           myerase (K.pattern);             if isempty(a); return; end;                        x = s(:,1) + n*half_pixel;            u = s(:,2);            cu = u==CURR.unit;            vu = [DECOMP.unit(u).visible]';                          if 1;                matchsym = 'o';                nomatchsym = 'o';                extrasym = 'o';                matchbrightness = 0.5;                hiddenbrightness = 0.25;                errorbrightness  = 1;            %    c2 = c1;              else                   matchsym = 'o';                nomatchsym = 'x';                extrasym = 'x';                matchbrightness = 0.4;                hiddenbrightness = 0.25;                errorbrightness  = 1;              end;              mb = matchbrightness;              hb = hiddenbrightness;              eb = errorbrightness;              if ~isempty(a);            ix = find (a==0 & vu & ~cu);   % Match            mymplot (K.pattern(1), S, [0,0], x(ix), u(ix), c1, mb, matchsym, 0);                                    ix = find (a==0 & cu);         % Match, selected unit            mymplot (K.pattern(2), S, [0,0], x(ix), u(ix), c3, mb, matchsym, 0);                                    ix = find (a==0 & ~vu & ~cu);  % Match, hidden unit            mymplot (K.pattern(3), S, [0,0], x(ix), u(ix), c1, hb, matchsym, 0);                      ix = find(a==1 & vu);    % False positive             mymplot (K.pattern(4:5), S, [0,0], x(ix), u(ix), c1, eb, extrasym, 1, half_pixel);                        ix = find(a==-1 & vu);   % Miss            mymplot (K.pattern(6:7), S, [0,0], x(ix), u(ix), c2, eb, nomatchsym, 1, half_pixel);                                        ix = find(a==1 & ~vu);    % False positive, hidden unit            mymplot (K.pattern(8), S, [0,0], x(ix), u(ix), c1, hb, extrasym, 0);                                                             ix = find(a==-1 & ~vu);   % Miss            mymplot (K.pattern(9), S, [0,0], x(ix), u(ix), c2, hb, nomatchsym, 0);                end;                         n2 = min(i2,DECOMP.nunits);                          for i=i1:n2;				col = pickcolor (i, C);                mytext (K.text(i-i1+1), S, [-.02, 0], t0, i, sprintf ('%i', i), ...					'hor', 'r', 'vert', 'm', ...					'fontsize', 10, 'color', col, 'tag', 'firing text', 'user', i);            end;                             myerase (K.pattern(10:end));            myerase (K.text(n2-i1+2:end));            myerase (K.extra);			emgplot ('firing cursors');            mydraw (K.axes);                      		case 'ifr'			t = [t0-0.5: 0.01: t1+0.5];			ix = find(t>=t0 & t<=t1);			ip = 0;  %          mysetup (K, S, 0, S.sensitivity);            if strcmp (SETS.closeup.style, 'merge');                u2 = DECOMP.closeup.comp(1).unit;            else                u2 = 0;            end;            fc = [0.5, 1, 2, 4, 8, 16];            fc = fc(get(K.lowpass, 'value'));  %          if CURR.swap;  %              c = C.compare;  %          else  %              c = C.template;  %          end;			for i=1:DECOMP.nunits;                c = pickcolor (i, C);				f = ifr (emgslist(i, t(1), t(end)), t, fc);				if i==CURR.unit | i==u2;					curr_f = f;                else					ip = ip + 1;                    myplot (K.pattern(ip), S, [0,0], t(ix), f(ix), 'color', c, 'user', i, ...                        'linestyle', '-', 'marker', 'none');				end;			end;            if strcmp (SETS.closeup.style, 'merge');                l = sort ([emgslist(CURR.unit, t(1), t(end)); emgslist(u2, t(1), t(end))]);                curr_f = ifr (l, t, fc);            end;			if CURR.unit>0;                ip = ip + 1;                myplot (K.pattern(ip), S, [0,0], t(ix), curr_f(ix), 'color', C.selection, ...                    'user', CURR.unit, 'linestyle', '-', 'marker', 'none');			end;                        myerase (K.pattern(ip+1:end));            myerase (K.text(12:end));            emgplot ('firing cursors');            mydraw (K.axes);                    end;			case 'firing colors'%        emgplot ('firing patterns'); return;		K = SCREEN.firing;		S = SETS.firing;		if isempty(K.axes); return; end;		if isempty(DECOMP.slist); return; end;               if CURR.compare;            emgplot ('firing patterns');            return;        end;                T = SETS.template;        n = max (T.display, 10);        if T.display >= 10;            i1 = T.first_unit;        else            i1 = T.first_unit + floor(T.display/2) - 5;            i1 = min (i1, DECOMP.nunits - n + 1);            i1 = max (i1, 1);        end;        i2 = min (i1+n-1, DECOMP.nunits);                    switch S.style		case 'normal'			for i=i1:i2;                c = pickcolor (i,C);				set (K.pattern(i-i1+1), 'color', c);				set (K.text(i-i1+1), 'color', c);			end;		case 'ifr'            			for i=i1:i2;                h = findobj (K.pattern, 'user', i);                c = pickcolor (i,C);                set (h, 'color', c);			end;            %      mydraw (K.axes);  %        case 'diff'%            emgplot ('firing patterns');        end;			case 'discharge'		K = SCREEN.firing;		if isempty (K.axes); return; end;		if strcmp(SETS.closeup.style, 'merge'); return; end;        if strcmp(SETS.firing.style, 'ifr');             SETS.firing.style = 'norm';            emgplot ('firing');            K = SCREEN.firing;        end;        c = C.template;        set (K.extra, 'erase', 'none', 'xdata', nan, 'ydata', nan);		myplot (K.extra, SETS.firing, [0,0], p2, p1, 'erase', 'none', 'vis', 'on', 'col', c);        SETS.firing.discount = SETS.firing.discount + 1;        if SETS.firing.discount > 10;            SETS.firing.discount = 0;  %          drawnow;        end;			case 'firing cursors'		K = SCREEN.firing;        S = SETS.firing;		if isempty (K.axes); return; end;		draw_cursor (K.cursor, S, SETS.signal, [-0.1, 1.1], 'draw', K.frame);        	case 'closeup'  		K = SCREEN.closeup;		S = SETS.closeup;		if isempty (K.axes); return; end;		if isempty(EMG.data) | strcmp (S.style, 'empty') | isempty(DECOMP.closeup);             myerase (K.axes);			return; 		end;		[t0, t1] = whattime (S);        SETS.closeup = mysetup (K, S, SETS.signal.sensitivity (CURR.chan, CURR.band));        S = SETS.closeup;                if strcmp (S.style, 'normal');            plotscale (K, S, 'major', 'major', ...                {'x', -.6, 1, 'below'}, ...                {'x', 1, -1, 'none'}, ...                {'y', S.left, 1, 'none'}, ...                {'y', S.right, -1, 'left'});        end;        emgplot ('closeup signals');            case 'closeup signals';		K = SCREEN.closeup;		S = SETS.closeup;		if isempty (K.axes); return; end;        [t0, t1] = whattime (S);		[resid, sig, recon] = emgsnapshot ('waves', DECOMP.closeup);		hrdt = sig.dt/10;		sig = resamp (sig, hrdt);		resid = resamp (resid, hrdt);		recon = resamp (recon, hrdt);		[s, t] = unsig (sig);		[resid, t] = unsig (resid);		[recon, t] = unsig (recon);		switch S.style		case 'normal'             if nargin==1;                if (t0 < t(1)) | (t1 > t(end));                    [ss, tt] = emgsignal (t0, t1);                    myplot (K.signal, S, [0,0], tt, ss, 'color', C.signal);                else                    myplot (K.signal, S, [0,0], t, s, 'color', C.signal);                end;            end;        	comp = DECOMP.closeup.comp;            if isempty(comp);                 myerase ([K.recon; K.temp; K.resid; K.text]);             else                myplot (K.recon, S, [0,0],  t, recon, 'color', C.reconstruct);                myplot (K.resid, S, [0,-1], t, resid);                n = length(comp);                if length(K.text) < n;                    SETS.closeup.text = get_more_handles (K.text, n);                    SETS.closeup.temp = get_more_handles (K.temp, n);                    K = SETS.closeup;                end;                if nargin==2;                     ix = p1;                else                    ix = find(~isnan([comp(:).time]));                end;                for ii=1:length(ix);                    i = ix(ii);                    time = comp(i).time;                    unit = comp(i).unit;                    if comp(i).visible;                        col = C.waves(comp(i).color,:);                        [s, t] = emgtemp (unit, 'interp');                        myplot (K.temp(i), S, [0,-2], t+time, s, ...                            'col', col, 'user', i);                        text_col = col;                    else                        myerase (K.temp(i));                        text_col = 0.5*(C.backgr_text + C.background);	                    end;                    mytext (K.text(i), S, [0,-2.8], time, 0, sprintf('%i', unit), ...                        'user', i, 'col', text_col);                end;                   myerase (K.temp(n+1:end));                myerase (K.text(n+1:end));            end;                            mydraw (K.axes);           		case 'merge'                         myerase (K.axes);            myplot (K.signal, S, [0,0], t, s, 'color', C.selection);            myplot (K.recon, S, [0,0], t, recon, 'color', C.template);            mydraw (K.axes);                    otherwise            myerase (K.axes);            		end;            			case 'navigation'		K = SCREEN.navigation; 		S = SETS.navigation;		if isempty (K.axes); return; end;		if isempty(EMG.data) ; 			return; 		end;		[t0, t1] = whattime (S);        if strcmp (S.style, 'signal');            [sig, t] = emgsignal (t0, t1);            c = 0.7*C.signal + 0.3*C.panel;        else            [sig, t] = emgresidual (t0, t1, CURR.band, 1);            c = 0.7*C.residual + 0.3*C.panel;        end;                SETS.navigation = mysetup (K, S, sig);        S = SETS.navigation;       		plotscale (K, S, 'major', 'none', ...            {'x', -1, +1, 'left'});          auxplot (K.aux, S);        myplot (K.signal, S, [0,0], t(:), sig(:), 'col', c);        emgplot ('navigation firing', 'nodraw');        emgplot ('navigation cursors');        mydraw (K.axes);        emgplot ('mapcursor');	case 'navigation firing'; 		K = SCREEN.navigation; 		S = SETS.navigation;		if isempty (K.axes); return; end;        if nargin==1;             p1 = 'draw';             if strcmp (S.style, 'residual');                emgplot ('navigation');            end;        end;        col = pickcolor (0, SETS.colors); 		[t0, t1] = whattime (S);        sl = emgslist (0, t0, t1);        if isempty(EMG.data); 			myerase (K.axes);            return        elseif isempty(sl);            myerase (K.firing);            return        elseif ~CURR.compare;            myplot (K.firing(1), S, [0,0.7], sl(:,1), 0*sl(:,1), 'col', col);            myerase (K.firing(2:4));        else            [s, a] = sldiff (sl, DECOMP.compare_slist, t0, t1, 0, inf);            vu = [DECOMP.unit(s(:,2)).visible]';            [c1, c2] = pickcolor (0, C);                        ix = find (a==0 | (a==1 & ~vu));   % Match            myplot (K.firing(1), S, [0,0.7], s(ix), 0*ix, 'col', .3*c1 + .7*C.panel);                                                ix = find(a==-1 & ~vu);   % Miss, hidden unit            myplot (K.firing(2), S, [0,0.7], s(ix), 0*ix, 'col', .3*c2 + .7*C.panel);                ix = find(a==1 & vu);    % False positive             myplot (K.firing(3), S, [0,0.7], s(ix), 0*ix, 'col', c1);                        ix = find(a==-1 & vu);   % Miss            myplot (K.firing(4), S, [0,0.7], s(ix), 0*ix, 'col', c2);                                end;        if strcmp (p1, 'draw');            mydraw (K.axes);        end;			case 'navigation cursors'; 		K = SCREEN.navigation;		S = SETS.navigation;        if isempty(EMG.data); return; end;        if nargin==1; p1='draw'; end;		if isempty (EMG.data);             myerase ([K.fcursor, K.scursor, K.ccursor]);        else            draw_cursor (K.fcursor, S, SETS.firing, [-1, -0.7], 'wait', K.frame);			draw_cursor (K.scursor, S, SETS.signal, [-0.7, 0.7], 'wait', K.frame);			draw_cursor (K.ccursor, S, SETS.closeup, [0.7, 1], 'draw', K.frame);		end;    case 'map'		K = SCREEN.map; 		S = SETS.map;		if isempty (K.axes); return; end;        if isempty(EMG.data);             myerase (K.axes); 			return; 		end;        SETS.map.time = EMG.start;         SETS.map.timebase = EMG.duration / (S.right - S.left);		SETS.map = mysetup (K, SETS.map, 0, 1); 		emgplot ('mapcursor');              case 'mapcursor'		K = SCREEN.map;		S = SETS.map;		if isempty (EMG.data);             myerase (K.cursor);        else			draw_cursor (K.cursor, S, SETS.navigation, [0, 1], 'draw', []);		end;            case 'map text'        K = SCREEN.map;        S = SETS.map;        if isnan(p1);            myerase (K.text);        else            mytext (K.text, S, [0, 1.5], p1,  0, sprintf ('      %.2f', p1));        end;        mydraw (K.axes);              	case 'entire window'		emgplot ({'map', 'navigation', 'signal', 'templates', 'firing', 'closeup', 'info', 'done'});    otherwise        warning ('emgplot: unknown option');        	end;                function draw_cursor (K, S, reference, y, draw_mode, frame);    global CURR SCREEN    if nargin==4; draw_mode='draw'; end;    h = get (K(1), 'parent');    a = get (h, 'user');    if isempty(a); return; end;    if isstruct (reference)        [t0, t1] = whattime (reference);        x = S.left + ([t0;t1;t1;t0] - a(1)) / (a(2)-a(1)) *(S.right - S.left);    else        t0 = reference(1);        t1 = reference(2);        x = [t0;t1;t1;t0];        x = S.left + ([t0;t1;t1;t0] - a(1)) / (a(2)-a(1)) *(S.right - S.left);    end;    y = [y(1),y(1),y(2),y(2)];    old = get (K(1), 'user');    if isempty(old);        axis_moved = 0;        cursor_moved = 0;    else        axis_moved = any(old.ax ~= [a(1), a(2)]);        cursor_moved = any (old.cx ~= [t0,t1] | old.cy ~= [y(1),y(2)]);    end;       scrolling = ~(isempty (SCREEN.down_click) & strcmp(get(SCREEN.timer,'running'),'off'));    if strcmp (CURR.draw_mode, 'smoother');        set (K(1), 'xdata', x, 'ydata', y, 'vis', 'on');    elseif axis_moved           set (K(1), 'erase', 'back', 'vis', 'off', 'xdata', x, 'ydata', y);        set (K(2), 'xdata', nan, 'ydata', nan);    elseif scrolling & cursor_moved;        if isnan(get(K(2),'xdata'));                        set (K(1), 'xdata', nan, 'ydata', nan);            mydraw(h);        end; %       set (frame, 'vis', 'off', 'vis', 'on');        set (K(2), 'xdata', x, 'ydata', y, 'vis', 'off', 'vis', 'on');    elseif  ~scrolling;       set (K(1), 'erase', 'back', 'vis', 'off', 'xdata', x, 'ydata', y);        set (K(2), 'xdata', nan, 'ydata', nan);        if ~SCREEN.pending;            mydraw(h);        end;    end;    set (K(1), 'user', struct ('cx', [t0, t1], 'cy', [y(1), y(2)], 'ax', [a(1), a(2)]));        function [c, c2] = pickcolor (unit, C)	global DECOMP CURR     if unit==0;        if CURR.swap;            c = C.compare;            c2 = C.template;        else            c = C.template;            c2 = C.compare;        end;        return;    elseif unit==CURR.unit;		c = C.selection;    else        g = DECOMP.unit(unit).virtual & isempty(emgslist(unit));        if (CURR.swap &~g) | (~CURR.swap & g);                        c = C.compare;        else            c = C.template;        end	end;	if ~DECOMP.unit(unit).visible;		c = .3*c + .7*C.panel;    elseif CURR.compare & ~(DECOMP.unit(unit).map==0 | DECOMP.unit(unit).virtual)        c = 0.5 * c + 0.5 * C.panel;    end;function hlist = get_more_handles (hlist, n)	hlist(end+1:n) = copyobj (hlist(1), ones(n-length(hlist),1)*get(hlist(1),'parent'));function mymplot (K, S, off, x, y, col, brightness, marker, bold, hp)      global SETS      if isempty(x); return; end;        col = brightness*col + (1-brightness)*SETS.colors.panel;        switch marker            case 'o';                size1 = 6;                size2 = 5;                xoff = 0;                c2 = 0.7*col + .3*SETS.colors.panel;            case 'x'                size1 = 10;                size2 = 10;                xoff = 1;                c2 = col;            otherwise                size1 = 6;                size2 = 6;                xoff = 1;                c2 = col;        end;        myplot (K(1), S, off, x, y, 'col', col, 'linestyle', 'none', 'marker', marker, 'markersize', size1);        if bold            myplot (K(2), S, off, x+xoff*hp, y, 'col', c2, 'linestyle', 'none', 'marker', marker, 'markersize', size2);        end;        function S = mysetup (K, S, p1, p2);    global CURR SCREEN    t0 = S.time + S.left*S.timebase;    t1 = S.time + S.right*S.timebase;    if nargin==4;        set (K.axes, 'user', [t0, t1, p1, p2]);    else        sens = S.sensitivity (CURR.chan, CURR.band);		if sens==0;            maxamp = max(abs(p1));			if maxamp <= S.sens_list(end);				sens = min (S.sens_list(S.sens_list >= maxamp));			else				sens = S.sens_list(end);			end;			S.sensitivity(CURR.chan,CURR.band) = sens;		end;        set (K.axes, 'user', [t0, t1, S.bottom*sens, S.top*sens]);     end;     switch CURR.draw_mode;         case 'faster'            set (K.box, 'vis', 'off', 'erase', 'none');            SCREEN.pending = 1;     end;                function mydraw (h)    global CURR SCREEN    switch CURR.draw_mode;        case 'smoother'        otherwise            c = get (h, 'ch');                 %%       c = findobj (c, 'vis', 'on');      %%      set (c(end:-1:1), 'vis', 'off', 'vis', 'on');       %%     return;                                    k = [findobj(c, 'xdata', nan)];             k = [k; findobj(c, 'str', ' ')];            for i=1:length(k);                c(c==k(i))=[];            end;            h = findall (c, 'erase', 'xor');            set (h, 'vis', 'off');            if strcmp (get(c(end), 'vis'), 'on');                set (c(end-1:-1:1), 'vis', 'off', 'vis', 'on');            else                set (c(end:-1:1), 'vis', 'off', 'vis', 'on');            end;            SCREEN.pending = 0;    end;    function myerase (hlist)    global CURR    if isempty(hlist); return; end;    if strcmp (get(hlist(1), 'type'), 'axes');        h_parent = hlist(1);        hlist = get(h_parent, 'ch');        is_axes = 1;    else        h_parent = get(hlist(1), 'parent');        is_axes = 0;    end;    if strcmp (CURR.draw_mode, 'smoother');        h = findobj (hlist, 'type', 'text');        set (h, 'string', ' ');        if is_axes;            set (hlist(1:end-1), 'vis', 'off');            h = findobj(hlist, 'type', 'line');            if ~isempty(h);                set (h(end), 'vis', 'on');   % frame            end;        else;            set (hlist, 'vis', 'off');        end;    elseif ~is_axes;        ch = get(h_parent, 'ch');        h = findobj (ch, 'erase', 'xor', 'vis', 'on');        set (h, 'vis', 'off');        if strcmp (get(ch(end), 'vis'), 'on');            h = findobj(hlist, 'erase', 'none');            set (h, 'erase', 'back');        end;        h = findobj (hlist, 'type', 'line');        set (h, 'xdata', nan, 'ydata', nan, 'erase', 'none', 'vis', 'off');        h = findobj (hlist, 'type', 'patch', 'vis', 'on');        set (h, 'xdata', nan, 'ydata', nan, 'erase', 'none', 'vis', 'off');        h = findobj (hlist, 'type', 'text');        %ZDT updated 05/28/09 fix for map text only the string         %set (h, 'string', ' ', 'erase', 'none', 'vis', 'off')         set (h, 'string', '', 'erase', 'none', 'vis', 'off');    else;        if strcmp (get(hlist(end), 'vis'), 'on');            h = findobj(hlist, 'erase', 'none');            set (h, 'erase', 'back');        end;        h = findobj (hlist, 'type', 'text');        set (h, 'string', ' ', 'erase', 'none', 'vis', 'off');        h = findobj (hlist, 'type', 'patch', 'vis', 'on');        set (h(1:end-1), 'xdata', nan, 'ydata', nan, 'erase', 'none', 'vis', 'off');        h = findobj (hlist, 'type', 'line');        set (h(1:end-1), 'xdata', nan, 'ydata', nan, 'erase', 'none', 'vis', 'off');        set (hlist(end), 'vis', 'off', 'vis', 'on');        if ~isempty(h);            set (h(end), 'vis', 'off', 'vis', 'on');        end;    end;            function mytext (K, S, org, x, y, str, varargin)    global CURR    if floor(length(varargin)/2) ~= length(varargin)/2;        error ('mytext: arguments not in pairs');    end;    h = get (K, 'parent');    a = get (h, 'user');    if isempty(a); return; end;    x = S.left + org(:,1) + (x-a(1))/(a(2)-a(1))*(S.right - S.left);    y = S.bottom + org(:,2) + (y-a(3))/(a(4)-a(3))*(S.top - S.bottom);    if strcmp (CURR.draw_mode, 'smoother');        set (K, 'pos', [x, y], 'string', str, varargin{:}, 'vis', 'on');    else        c = get (h, 'ch');        if strcmp (get(c(end), 'vis'), 'on');            cc = findall(c, 'erase', 'xor', 'vis', 'on');            set (cc, 'vis', 'off');            set (K, 'erase', 'back');            set (K, 'pos', [x, y], 'string', str, varargin{:}, 'erase', 'none', 'vis', 'on');            %ZDT 05/28/09 fix for map text            set(c(end),'vis','off');                    else            set (K, 'pos', [x, y], 'string', str, varargin{:}, 'erase', 'none', 'vis', 'off');        end;    end;function auxplot (K, S, varargin)    global CURR SETS    if CURR.auxchan==0 | ~S.aux;        myerase (K);        return;    end;    h = get (K, 'parent');    a = get (h, 'user');    if isempty(a); return; end;    [t0, t1] = whattime (S);%    t0 = max(t0 - AUX.signal.dt, AUX.time);%    t1 = min(t1 + 2*AUX.signal.dt, AUX.time + EMG.buffer_length);    s = emgsignal (t0, t1, 1, CURR.auxchan);    s.sig = (s.sig - SETS.auxiliary.min);    s.sig = s.sig / (SETS.auxiliary.max - SETS.auxiliary.min);    x = s.t0 + [0:length(s.sig)-1]'*s.dt;    y = s.sig;    if isempty(x);        set (K, 'xdata', nan, 'ydata', nan);        return;    end;    x = [t0; x; t1];    y = [y(1) - (y(2)-y(1))*(x(2)-x(1))/s.dt; y; y(end)+(y(end)-y(end-1))*(x(end)-x(end-1))/s.dt];    p = get (h, 'position');    xn = (x-a(1))/(a(2)-a(1));    x = S.left + xn*(S.right - S.left);    y = S.bottom + y*(S.top - S.bottom);    if strcmp (CURR.draw_mode, 'smoother');        set (K, 'xdata', x, 'ydata', y, varargin{:}, 'vis', 'on');    else        c = get (h, 'ch');        if strcmp (get(c(end), 'vis'), 'on');            cc = findobj(c, 'erase', 'xor', 'vis', 'on');            set (cc, 'vis', 'off');            set (K, 'erase', 'back');            set (K, 'xdata', x, 'ydata', y, varargin{:}, 'erase', 'none', 'vis', 'on');       else            set (K, 'xdata', x, 'ydata', y, varargin{:}, 'erase', 'none', 'vis', 'off');         end;    end;    function myplot (K, S, org, x, y, varargin)    global CURR    DECIMATE = 0;    h = get (K, 'parent');    a = get (h, 'user');    if isempty(a); return; end;    if isempty(x);        set (K, 'xdata', nan, 'ydata', nan);        return;    end;    p = get (h, 'position');    xn = (x-a(1))/(a(2)-a(1));    xp = abs(xn(end) - xn(1))*p(3);    if xp>0 & DECIMATE;        idec = floor (length(x)/xp);        if idec>4;            l = floor(length(y)/idec);            y = reshape (y(1:idec*l), idec, l);            y = [max(y);min(y)];            xn = xn(1:idec:idec*l);            xn = xn(:)';            xn = [xn;xn];            y = y(:);            xn = xn(:);        end;    end;    x = S.left + org(:,1) + xn*(S.right - S.left);    y = S.bottom + org(:,2) + (y-a(3))/(a(4)-a(3))*(S.top - S.bottom);    if strcmp (CURR.draw_mode, 'smoother');        set (K, 'xdata', x, 'ydata', y, varargin{:}, 'vis', 'on');    else        c = get (h, 'ch');        if strcmp (get(c(end), 'vis'), 'on');            cc = findobj(c, 'erase', 'xor', 'vis', 'on');            set (cc, 'vis', 'off');            set (K, 'erase', 'back');            set (K, 'xdata', x, 'ydata', y, varargin{:}, 'erase', 'none', 'vis', 'on');       else            set (K, 'xdata', x, 'ydata', y, varargin{:}, 'erase', 'none', 'vis', 'off');         end;    end;    function set_text (K, sinfo)    n = length(K);    pos = get (K(1), 'pos');    p = pos(1);    w = ones(n,1);    for i=1:n;        if isempty(sinfo{i,1});            w(i) = 0;        end;    end;    w = w / sum(w) * pos(3);    for i=1:n;        slong = sinfo {i,1};        sshort = sinfo {i,2};        col = sinfo{i,3};        set (K(i), 'string', slong, 'fore', col, 'vis', 'on');        if ~isempty(slong);        e = get (K(i), 'extent');        if e(3) > w;            set (K(i), 'string', sshort);            e = get (K(i), 'extent');        end;        s = [sshort, '...'];        while e(3) > w;                        s (end-3) = [];            set (K(i), 'string', s);            e = get(K(i), 'extent');        end;        if i>1;            set (K(i), 'pos', [p, pos(2), e(3), pos(4)]);        end;        p = p + e(3);        end;    end; 	