function ifr = ifr (ftimes, t, fc, gap, style);% Compute smoothed instantaneous firing rate.% Copyright (c) 2006-2009. Kevin C. McGill and others.% Part of EMGlab version 1.0.% This work is licensed under the Aladdin free public license.% For copying permissions see license.txt.% email: emglab@emglab.net	if nargin<3; fc = 1; end;	if nargin<4; gap = 0.5; end;    if nargin<5; style = 0; end;	if length(ftimes)<1 		ifr = nan*ones(size(t));		return;	end;		lt = length(t);	dt = t(2) - t(1);	gr = [t(1)-dt/2: dt: t(end)+dt]';	ifr = nan*ones(size(t));	isi = diff (ftimes);	segments = [0; find(isi>gap); length(ftimes)];	for i = 2:length(segments);		s = ftimes (segments(i-1)+1: segments(i)); 		if length(s)>1 & s(1)<gr(end) & s(end)>gr(1)			[i1, i2, x] = frhelper (s, gr, fc, style);			if length(x) > 0;				ifr(i1:i2-1) = x;			end;		end;	end;function [i1, i2, x] = frhelper (s, gr, fc, style);	i1 = min(find(gr>s(1)));	i2 = max(find(gr<s(end)));	dt = gr(2)-gr(1);    switch style        case 0            x = interp1 (s, [1:length(s)]', gr(i1:i2));            if length(x)==0;                i1 = 1;                i2 = 1;                x = nan;                return;            end;            x = diff(x)/dt;                    case 1            x = interp1 (s, [1/(s(2)-s(1));1./diff(s)], gr(i1:i2-1)+dt/2);            if length(x)==0;                i1 = 1;                i2 = 1;                x = nan;                return;            end;    end;	x = lpfilt (x, fc*dt);	x = lpfilt (x, fc*dt);%	x = lpfilt (x, fc*dt);