function status = emgdfile (opt, varargin)% EMGlab function for reading and importing emg data files.% Copyright (c) 2006-2009. Kevin C. McGill and others.% Part of EMGlab version 1.0.% This work is licensed under the Aladdin free public license.% For copying permissions see license.txt.% email: emglab@emglab.netglobal EMG CURR EMGSIGNAL AUXSIGNALswitch lower (opt);    case 'open'        [file, chan, status] = emgfile ('open');        if ~status; return; end;        emgprefs ('set', 'data_path', fileparts(file.name));        emgsignal ('init');        nyquist = emgprefs ('nyquist_rate');        emgrate = chan(1).rate;        n_emg_chans = 1;        go = 1;        for i=2:length(chan);            if chan(i).rate ==emgrate & go;                n_emg_chans = i;            else                go = 0;            end;        end;        create_source (file, chan, [1,n_emg_chans], nyquist, 'replace');        if ~status; return; end;        CURR.chan = 1;        EMG.nchannels = n_emg_chans;        EMG.duration = EMG.source(1).duration;        EMG.rate = EMG.source(1).rate;        EMG.start = EMG.source(1).start;        EMG.data = 1;        emgsignal ('connect', CURR.chan, 1, 'init');                nyquist = 0;        for i=1:length(chan);            create_source (file, chan, [i, i], nyquist, 'add');        end;        CURR.auxchan = 0;        status = 1;            case 'open aux'        [file, chan, status] = emgfile ('open');        if ~status | isempty(chan); return; end;        nyquist = 0;        CURR.auxchan = -length(EMG.source);        for i=length(chan);            create_source (file, chan, [i,i], nyquist, 'add');        end;        emgsignal ('connect', CURR.auxchan, 2);        status = 1;                  case 'import';              if isempty (EMGSIGNAL);            msgbox ('Nothing to import. Global variable EMGSIGNAL is empty.', 'EMGlab');            status = 0;            return;        end        [file, chan, status] = emgfile ('import', EMGSIGNAL);        nchans = length(chan);        if ~status | nchans==0; return; end;        emgsignal ('init');        nyquist = emgprefs ('nyquist_rate');        CURR.chan = 1;        create_source (file, chan, [1,nchans], nyquist, 'replace');        EMG.nchannels = nchans;        EMG.duration = EMG.source(1).duration;        EMG.rate = EMG.source(1).rate;        EMG.start = EMG.source(1).start;        EMG.data = 1;                emgsignal ('connect', CURR.chan, 1, 'init');        nyquist = 0;        for i=1:length(chan);            create_source (file, chan, [i, i], nyquist, 'add');        end;        CURR.auxchan = 0;        status = 1;            case 'import aux';              if isempty (AUXSIGNAL);            msgbox ('Nothing to import. Global variable AUXSIGNAL is empty.', 'EMGlab');            status = 0;            return;        end        [file, chan, status] = emgfile ('import', AUXSIGNAL);        if ~status; return; end;        nyquist = 0;        CURR.auxchan = -length(EMG.source);        for i=1:length(chan);            create_source (file, chan, [i,i], nyquist, 'add');        end;        emgsignal ('connect', CURR.auxchan, 2);    case 'load';         ichan = varargin{1};        t1 = varargin{2};        t2 = varargin{3};        if ichan > 0;            ithread = 1;            isig = ichan;        else            ithread = 2;            isig = 1;        end;        emgfile ('load', ithread, isig, t1, t2);       end;function create_source (file, chan, chanrange, nyquist, disposition)    global EMG    c1 = chanrange(1);    S = struct ( ...        'file',         file, ...        'channelRange', chanrange, ...        'channel',      chan(chanrange(1):chanrange(2)), ...        'nchannels',    chanrange(2)-chanrange(1)+1, ...        'rate',         chan(c1).rate, ...        'start',        chan(c1).start, ...        'nyquist',      nyquist, ...        'decimate',     1, ...        'duration',     chan(c1).length / chan(c1).rate);    if S.rate < 2*nyquist;        warndlg ('Sampling rate is less than twice Nyquist rate.', 'EMGlab');    end    if S.nyquist==0;    elseif  S.rate/2.1/S.nyquist > 2        orig_rate = S.rate;        S.decimate = floor (orig_rate / 2.1 / S.nyquist);        S.rate = orig_rate / S.decimate;        S.duration = floor(S.duration*S.rate) / S.rate;    end;    for i=1:S.nchannels;        if isempty(S.channel(i).units);            S.channel(i).gain = 1;            S.channel(i).units = 'ADC units';        end;        S.channel(i).min = [];        S.channel(i).max = [];        S.channel(i).highpass = 0;        S.channel(i).lowpass = inf;    end;    if strcmp (disposition, 'replace');        EMG.source = S;    else        EMG.source(end+1) = S;    end;