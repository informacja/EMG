function out = emgprefs (opt, varargin)% EMGlab function for the preference file and dialog.% Copyright (c) 2006-2009. Kevin C. McGill and others.% Part of EMGlab version 1.0.% This work is licensed under the Aladdin free public license.% For copying permissions see license.txt.% email: emglab@emglab.net	global EMGLAB CURR	switch lower (opt);            case 'init'        p = []; 		p = clerk ('add', p, 'nyquist_rate', 'double', 5000, {}, 1, 'Nyquist rate');		p = clerk ('add', p, 'template_width', 'double', 0.01, {}, 1, 'Spike width (ms)');		p = clerk ('add', p, 'muap_width', 'double', 0.05, {}, 1, 'MUAP width (ms)');		p = clerk ('add', p, 'figure_position', 'int', 0, {}, 0, 'Figure Position');		p = clerk ('add', p, 'data_path', 'string', EMGLAB.path, {}, 0, 'Data Path');		p = clerk ('add', p, 'annotation_path', 'string', EMGLAB.path, {}, 0, 'Annotation Path');        p = clerk ('add', p, 'compare_path', 'string', EMGLAB.path, {}, 0, 'Compare Path'); 		p = clerk ('add', p, 'color_scheme', 'string', 'scope', {'paper','scope','custom'}, 1, 'Color scheme', 1);        p = clerk ('add', p, 'draw_mode', 'string', 'smoother', {'smoother', 'faster'}, 1, 'Drawing mode');        p = clerk ('add', p, 'animation', 'string', 'on', {'on', 'no auto scroll', 'off'}, 1, 'Dragging animation');		p = clerk ('add', p, 'font_size', 'int', 12, {8,9,10,11,12} ,1, 'Font size');        p = clerk ('add', p, 'buffer_length', 'double', inf, {}, 1, 'Buffer length (s)');		p = clerk ('add', p, 'auxoffset', 'double', 0, {}, 0, 'Offset');		p = clerk ('add', p, 'auxmax', 'double', 2048, {}, 0, 'Maximum');		p = clerk ('add', p, 'auxunits', 'string','A/D units', {'A/D units','units'}, 0, 'Units');		p = clerk ('add', p, 'auxlowpassfilter','double',5, {}, 0, 'Low-pass filter');        EMGLAB.prefs = p;                emgplugin ('init');        EMGLAB.prefs = clerk ('load', EMGLAB.prefs, fullfile (EMGLAB.path, 'emglab.prefs'));        emgprefs ('update')           case 'add';        [EMGLAB.prefs, err] = clerk ('add', EMGLAB.prefs, varargin{:});        if ~isempty(err);            error (['emgprefs: ', err]);        end;        case 'set'        [EMGLAB.prefs, err] = clerk ('set', EMGLAB.prefs, varargin{:});        if ~isempty(err);            error (['emgprefs: ', err]);        end;        emgprefs ('update');        	case 'dialog';		old = EMGLAB.prefs;		old.template_width.value = old.template_width.value * 1000;		old.muap_width.value = old.muap_width.value * 1000;                [new, status] = gendialog (old, 'Preferences', emgprefs('font_size'));        out = '';                if status;             if new.template_width.value > new.muap_width.value;                uiwait (warndlg ({'Template width must be less than or equal to MUAP width.', ...                    'Values not changed.'}, 'EMGlab', 'modal'));                new.template_width.value = old.template_width.value;                new.muap_width.value = old.muap_width.value;            end;            if new.template_width.value ~= old.template_width.value;                out = 'resize';            end;			new.template_width.value = new.template_width.value / 1000;            if new.muap_width.value ~= old.muap_width.value;                out = 'resize';            end;			new.muap_width.value = new.muap_width.value / 1000;            if new.buffer_length.value ~= old.buffer_length.value;                out = 'rebuffer';            end;			EMGLAB.prefs = new;			emgprefs ('save');            emgprefs ('update');			emgsettings ('colors');			emgscreen ('resize');        end;	case 'save'		EMGLAB.prefs.figure_position.value = get (EMGLAB.figure, 'position');		if ~isempty (EMGLAB.emg_file);			EMGLAB.prefs.data_path.value = fileparts (EMGLAB.emg_file);		end;                [b, err] = clerk ('save', EMGLAB.prefs, fullfile (EMGLAB.path, 'emglab.prefs'));		if ~isempty(err)			warndlg ('Unable to save preferences file.', 'EMGlab');			return;		end;            case 'update'        CURR.draw_mode = clerk ('get', EMGLAB.prefs, 'draw_mode');        CURR.animation = clerk ('get', EMGLAB.prefs, 'animation');                        otherwise        [out, err] = clerk ('get', EMGLAB.prefs, opt);        if ~isempty(err);            error (['emgprefs: ', err]);        end;            	end;