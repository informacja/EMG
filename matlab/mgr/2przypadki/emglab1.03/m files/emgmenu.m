function emgmenu (h)% EMGlab function for creating menus and enabling/checking menu items.% Copyright (c) 2006-2009. Kevin C. McGill and others.% Part of EMGlab version 1.0.% This work is licensed under the Aladdin free public license.% For copying permissions see license.txt.% email: emglab@emglab.netglobal VAULT SETS CURR DECOMP EMGSIGNAL AUXSIGNAL EMG SCREEN EMGLABif h == SCREEN.figure;    m = uimenu (h, 'label', 'File');        uimenu (m, 'label', 'About EMGlab...');        uimenu (m, 'label', 'Load EMG file', 'separator', 'on');        uimenu (m, 'label', 'Import EMG signal');        uimenu (m, 'label', 'Open annotation', 'accelerator', 'O', 'separator', 'on');        uimenu (m, 'label', 'Save', 'accelerator', 'S');        uimenu (m, 'label', 'Save as ...');        uimenu (m, 'label', 'Load auxiliary file', 'separator', 'on');        uimenu (m, 'label', 'Import auxiliary signal');        uimenu (m, 'label', 'Preferences', 'separator', 'on');    s = uimenu (m, 'label', 'Screen shot');        uimenu (s, 'label', 'Signal Panel');        uimenu (s, 'label', 'Template Panel');        uimenu (s, 'label', 'Firing Panel');        uimenu (s, 'label', 'Close-up Panel');        uimenu (s, 'label', 'Navigation Panel');        uimenu (m, 'label', 'Redraw window');        uimenu (m, 'label', 'Print', 'accelerator', 'P');        uimenu (m, 'label', 'Quit', 'accelerator', 'Q', 'separator', 'on');    m = uimenu (h, 'label', 'Edit');        uimenu (m, 'label', 'Undo', 'Accelerator', 'Z');        uimenu (m, 'label', 'Redo', 'Accelerator', 'Y');        uimenu (m, 'label', 'Copy selected firing pattern','Accelerator', 'C', 'separator', 'on');        uimenu (m, 'label', 'Copy all firing patterns', 'Accelerator', 'C', 'separator', 'on');        uimenu (m, 'label', 'Copy selected template');        uimenu (m, 'label', 'Copy all templates');        uimenu (m, 'label', 'Paste', 'Accelerator', 'V');        uimenu (m, 'label', 'Delete firings', 'separator', 'on');        uimenu (m, 'label', 'Delete all');    m = uimenu (h, 'label', 'View');        uimenu (m, 'label', 'Signal panel','Enable','off','separator', 'on');        uimenu (m, 'label', '   Grid', 'Tag', ' signal');        uimenu (m, 'label', '   Show auxiliary', 'tag', ' signal');        uimenu (m, 'label', 'Template panel', 'Enable', 'off', 'separator', 'on');        uimenu (m, 'label', '   Templates');        uimenu (m, 'label', '   Cascade');        uimenu (m, 'label', '   Shimmer');        uimenu (m, 'label', 'Firing panel', 'Enable', 'off', 'separator', 'on');        uimenu (m, 'label', '   Grid', 'Tag', ' firing');        uimenu (m, 'label', '   Show auxiliary', 'Tag', ' firing');        uimenu (m, 'label', 'Closeup panel', 'Enable', 'off', 'separator', 'on');        uimenu (m, 'label', '   Grid', 'Tag', ' closeup');        uimenu (m, 'label', 'Navigation panel','Enable','off','separator', 'on');        uimenu (m, 'label', '   Signal', 'Tag', ' navigation');        uimenu (m, 'label', '   Residual', 'Tag', ' navigation');        uimenu (m, 'label', '   Show auxiliary', 'Tag', ' navigation');        uimenu (m, 'label', 'Auxiliary Signal', 'Enable', 'off', 'separator', 'on');        uimenu (m','label', '   Channel');        uimenu (m, 'label', '   Settings');    m = uimenu (h, 'label', 'Analyze');        uimenu (m, 'label', 'Auto Decomp');        uimenu (m, 'label', 'Re-average all');        uimenu (m, 'label', 'Center all');        uimenu (m, 'label', 'Show all');    m = uimenu (h, 'label', 'Tools');        uimenu (m, 'label', 'Compare annotation with ...');        uimenu (m, 'label', 'Highlight differences');        uimenu (m, 'label', 'Swap annotations'  );    returnend    menu = get (h, 'label');    c = get (h, 'children');        tag = '';	for i = length(c): -1: 1;        item = get (c(i), 'label');        if length(item)<3            fullitem = [menu, ' ', item];            tag = item;        elseif strcmp (item(1:3), '   ');            fullitem = [menu, ' ', tag, item(3:end)];        else            fullitem = [menu, ' ', item];            tag = item;                 end                enable = strcmp (get (c(i), 'enable'), 'on');        check =  strcmp (get (c(i), 'checked'), 'on');        visible = strcmp (get (c(i), 'visible'), 'on');        switch lower (fullitem);            case 'file import emg signal'                enable = ~isempty (EMGSIGNAL) | exist('my_emgsignal')==2;            case 'file load auxiliary file'                enable = ~isempty (EMG.data);            case 'file import auxiliary signal'                enable = ~isempty (EMG.data) & ~isempty (AUXSIGNAL);            case 'file open annotation'                enable = ~isempty (EMG.data);            case 'file save'                enable = DECOMP.nunits>0;            case 'file save as ...'                enable = DECOMP.nunits>0;            case 'screenshot signal panel'                enable = ~isempty (SCREEN.signal.axes);            case 'screenshot template panel'                enable = ~isempty (SCREEN.template.axes);            case 'screenshot firing panel'                enable = ~isempty (SCREEN.firing.axes);            case 'screenshot close-up panel'                enable = ~isempty (SCREEN.closeup.axes);            case 'edit copy all firing patterns'                visible = CURR.unit == 0;                enable = DECOMP.nunits > 0;            case 'edit copy selected firing pattern'                visible = CURR.unit > 0;            case 'edit copy all templates'                visible = CURR.unit == 0;                enable = DECOMP.nunits > 0;            case 'edit copy selected template'                visible = CURR.unit > 0;            case 'edit paste'                enable = ~isempty (EMGLAB.clipboard);            case 'edit delete firings'                enable = DECOMP.nunits > 0;            case 'edit delete all'                enable = DECOMP.nunits > 0;            case 'view signal panel grid'                enable = ~isempty(SCREEN.signal.axes) & ~isempty(EMG.data);                check = SETS.signal.grid;            case 'view signal panel show auxiliary'                enable = ~isempty(SCREEN.signal.axes) & size(EMG.thread,2)>1;                check = SETS.signal.aux;            case 'view template panel templates'                enable = ~isempty(SCREEN.template.axes) & DECOMP.nunits>0;                check = strcmp (SETS.template.style, 'normal');            case 'view template panel cascade'                enable = ~isempty(SCREEN.template.axes) & DECOMP.nunits>0;                check = strcmp (SETS.template.style, 'cascade');            case 'view template panel shimmer'                enable = ~isempty(SCREEN.template.axes) & DECOMP.nunits>0;                check = strcmp (SETS.template.style, 'shimmer');                                    case 'view firing panel grid'                enable = ~isempty(SCREEN.firing.axes) & ~isempty(EMG.data);                check = SETS.firing.grid;            case 'view firing panel show auxiliary'                enable = ~isempty(SCREEN.firing.axes) & size(EMG.thread,2)>1;                check = SETS.firing.aux;            case 'view closeup panel grid'                enable = ~isempty(SCREEN.closeup.axes) & ~isempty(DECOMP.closeup);                check = SETS.closeup.grid;            case 'view navigation panel signal'                enable = ~isempty(EMG.data);                check = strcmp (SETS.navigation.style, 'signal');            case 'view navigation panel residual'                enable = DECOMP.nunits > 0;                check = strcmp (SETS.navigation.style, 'residual');            case 'view navigation panel show auxiliary'                enable = size(EMG.thread,2)>1;                check = SETS.navigation.aux;            case 'view auxiliary signal channel'                enable = size(EMG.source,2)>0;                delete (get(c(i), 'children'));                for k=EMG.nchannels+2:length(EMG.source);                    if k==1-CURR.auxchan; checked = 'on'; else checked = 'off'; end;                    uimenu (c(i), 'label', EMG.source(k).channel(1).name, 'checked', checked, ...                        'callback', sprintf ('emgaction(''select auxiliary'',''%i'')', 1-k));                end;                for k=1:EMG.nchannels;                    if k==-CURR.auxchan; checked = 'on'; else checked = 'off'; end;                    if k==1; sep = 'on'; else sep = 'off'; end;                    uimenu (c(i), 'label', EMG.source(1).channel(k).name, 'checked', checked, ...                        'separator', sep, ...                        'callback', sprintf ( 'emgaction(''select auxiliary'',''%i'')', -k));                 end;            case 'view auxiliary signal settings'                enable = size(EMG.thread,2)>1;            case 'analyze auto decomp'                enable = ~isempty(EMG.data);            case 'analyze re-average all'                enable = DECOMP.nunits > 0;            case 'analyze center all'                enable = DECOMP.nunits > 0;            case 'analyze show all'                enable = DECOMP.nunits > 0;            case 'tools compare annotation with ...'                enable = DECOMP.nunits > 0;            case 'tools highlight differences'                enable = ~isempty (CURR.compare_file);                check = CURR.compare;            case 'tools swap annotations'                enable = ~isempty (CURR.compare_file);                check = CURR.swap;            otherwise                if length(item)>=4;                switch lower(item(1:4));                    case 'undo'                        if ~isempty(VAULT.undo)                            set (c(i), 'label', ['Undo ', VAULT.undo(end).command]);                            enable = 1;                        else                            set (c(i), 'label', 'Undo');                            enable = 0;                        end;                    case 'redo'                        if ~isempty(VAULT.redo)                            set (c(i), 'label', ['Redo ', VAULT.redo(end).command]);                            enable = 1;                        else                            set (c(i), 'label', 'Redo');                            enable = 0;                        end;                end;                end;        end;        if enable; en = 'on'; else en = 'off'; end        if check;  ch = 'on'; else ch = 'off'; end        if visible; vi = 'on'; else vi = 'off'; end        set (c(i), 'enable', en, 'checked', ch, 'visible', vi);	end;            