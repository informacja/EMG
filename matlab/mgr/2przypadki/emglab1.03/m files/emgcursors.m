function emgcursors (opt, p1, p2, p3, p4)% EMGlab function to ooordinate the cursors in the various panels% Copyright (c) 2006-2009. Kevin C. McGill and others.% Part of EMGlab version 1.0.% This work is licensed under the Aladdin free public license.% For copying permissions see license.txt.% email: emglab@emglab.net	global CURR SETS EMG DECOMP		switch lower (opt);	    case 'init'        if isempty(EMG.data); return; end;        SETS.signal.time = EMG.start;        SETS.firing.time = EMG.start;        SETS.navigation.time = EMG.start;        emgcursors ('timebase', 'navigation', '?');			case 'focus';  % p1 = panel, p2 = opt, p3 = time, p4 = plot/noplot		if isempty(EMG.data); return; end;        if nargin<4; p3 = 0; end;        if nargin<5; p4 = 'norm'; end;        [panel, opt, time, mode] = deal (p1, p2, p3, p4);            old = SETS;        switch panel        case 'signal';            SETS.signal.time = set_time (SETS.signal, opt, time);            SETS.firing = touch (SETS.firing, SETS.signal);            SETS.navigation = touch (SETS.navigation, SETS.signal, mode);            plot_changes (old, mode);        case 'firing';            t = set_time (SETS.firing, opt, time);            SETS.firing.time = round(t*1000)/1000;            SETS.navigation = touch (SETS.navigation, SETS.firing);            plot_changes (old);                    case 'template'            switch opt                case 'z'                case '>'                    time = SETS.template.first_unit -1;                case '<'                    time = SETS.template.first_unit + 1;            end;            time = max (time, 1);            time = min (DECOMP.nunits-SETS.template.display+1, time);            if time ~= SETS.template.first_unit;                SETS.template.first_unit = time;                emgplot ('templates');                emgplot ('firing');            end;        case 'closeup';            SETS.closeup.time = set_time (SETS.closeup, opt, time);            DECOMP.closeup = emgsnapshot ('snap', SETS.closeup.time);            SETS.signal = touch (SETS.signal, SETS.closeup);            SETS.firing = touch (SETS.firing, SETS.closeup);            SETS.navigation = touch (SETS.navigation, SETS.closeup);            plot_changes (old);        case 'navigation';            SETS.navigation.time = set_time (SETS.navigation, opt, time);            plot_changes (old);        case 'map';            SETS.map.time = set_time (SETS.map, opt, time);            plot_changes (old);        end;            case 'timebase'        if isempty (EMG.data); return; end;        if nargin<4; p3 = 'norm'; end;        [panel, opt, mode] = deal (p1, p2, p3);                    old = SETS;        switch panel        case 'signal'            S = SETS.signal;            [focus, offset] = get_focus (S, SETS.closeup);            tbmax = min(EMG.duration, EMG.buffer_length)/(S.right - S.left);            if strcmp (opt, '| |');                SETS.signal.timebase = bump (S.timebase, S.tbase_list, '<');            elseif strcmp (opt, '|||');                SETS.signal.timebase = bump (S.timebase, S.tbase_list, '>', tbmax);            end;            SETS.template.timebase = SETS.signal.timebase;            SETS.signal.time = set_time (SETS.signal, 'z', focus - offset*SETS.signal.timebase);            SETS.closeup = touch (SETS.closeup, SETS.signal, 'shrink');            SETS.firing = touch (SETS.firing, SETS.signal, 'stretch', tbmax);            SETS.navigation = touch (SETS.navigation, SETS.signal, 'stretch', tbmax);            plot_changes (old);         case 'firing'            S = SETS.firing;            tbmax = min(EMG.duration, EMG.buffer_length)/(S.right - S.left);            [focus, offset] = get_focus (S, SETS.signal);            if strcmp (opt, '| |');                SETS.firing.timebase = bump (S.timebase, S.tbase_list, '<');            elseif strcmp (opt, '|||');                SETS.firing.timebase = bump (S.timebase, S.tbase_list, '>', tbmax);            end;            SETS.firing.time = set_time (SETS.firing, 'z', focus - offset*SETS.firing.timebase);            SETS.signal = touch (SETS.signal, SETS.firing, 'shrink');            SETS.navigation = touch (SETS.navigation, SETS.firing, 'stretch', tbmax);%            SETS.navigation = touch (SETS.navigation, SETS.firing, 'shrink');            plot_changes (old);        case 'closeup'            S = SETS.closeup;            if CURR.band==1;                tbmax = emgprefs ('muap_width')/(S.right - S.left);            else                tbmax = emgprefs ('template_width')/(S.right-S.left);            end;            if strcmp (opt, '| |');                SETS.closeup.timebase = bump (S.timebase, S.tbase_list, '<');            elseif strcmp (opt, '|||');                %tbmax = EMG.duration/(S.right - S.left);                SETS.closeup.timebase = bump (S.timebase, S.tbase_list, '>', tbmax);            elseif strcmp (opt, '?');                SETS.closeup.timebase = min(S.timebase, tbmax);            end;            if strcmp (SETS.closeup.style, 'normal');                tbmax = min(EMG.duration, EMG.buffer_length)/(S.right - S.left);                SETS.closeup.time = set_time (SETS.closeup, 'z', SETS.closeup.time);                SETS.signal = adjust (SETS.signal, SETS.closeup, 'stretch', tbmax);                SETS.firing = adjust (SETS.firing, SETS.closeup, 'stretch', tbmax);                SETS.navigation = adjust (SETS.navigation, SETS.closeup, 'stretch', tbmax);            end;            plot_changes (old, mode);        case 'navigation'            S = SETS.navigation;            tbmax = min(EMG.duration, EMG.buffer_length)/(S.right - S.left);            if strcmp (opt, '| |');                SETS.navigation.timebase = bump (S.timebase, S.tbase_list, '<', tbmax);            elseif strcmp (opt, '|||');                SETS.navigation.timebase = bump (S.timebase, S.tbase_list, '>', tbmax);            elseif strcmp (opt, '?');                SETS.navigation.timebase = min (S.timebase, tbmax);                SETS.navigation.timebase = bump (SETS.navigation.timebase, S.tbase_list, '>=', tbmax);            end;            SETS.navigation.time = set_time (SETS.navigation, 'z', SETS.navigation.time);            SETS.signal = touch (SETS.signal, SETS.navigation, 'shrink');            SETS.firing = touch (SETS.firing, SETS.navigation, 'shrink');            plot_changes (old);        end;	end;   function [focus, offset] = get_focus (S, C)    S_t0 = S.time + S.left*S.timebase;    S_t1 = S.time + S.right*S.timebase;    S_focus = (S_t0 + S_t1) / 2;    if isempty(C.time);        focus = S_focus;    else        focus = C.time + (C.left + C.right)*C.timebase/2;    end;    if focus < S_t0 | focus > S_t1;        focus = S_focus;    end;    offset = (focus - S_t0) / S.timebase;  function time = set_time (S, opt, time)      global EMG    switch opt        case '<'            time = S.time - S.time_step * S.timebase;        case '>'            time = S.time + S.time_step * S.timebase;        case 'l'            time = time - S.left * S.timebase;        case 'z'            time = time;        case 'c'            time = time - (S.right - S.left) * S.timebase / 2;        case 'r'            time = time - S.right * S.timebase;    end;    time = min (time, EMG.start + EMG.duration - S.right*S.timebase);    time = max (time, EMG.start - S.left*S.timebase);    time = round(time*EMG.rate)/EMG.rate;function val = bump (val, list, opt, vmax)    if isnan(val); return; end;    if nargin>=4;        list = list(list<=vmax);        list = [list(:); vmax];    end;    switch opt;        case '<'            i = max(find(list<val));            lim = 1;        case '>'            i = min(find(list>val));            lim = length(list);        case '<='            i = max(find(list<=val));            lim = 1;        case '>='            i = min(find(list>=val));            lim = length(list);    end;    if isempty(i);       val = list(lim);    else        val = list(i);    end;function S = adjust (S, C, opt, tbmax)    if nargin<3; opt=''; end;    C_t0 = C.time + C.left*C.timebase;    C_t1 = C.time + C.right*C.timebase;    S_t0 = S.time + S.left*S.timebase;    S_t1 = S.time + S.right*S.timebase;    if C_t1-C_t0 > S_t1-S_t0 & strcmp (opt, 'stretch');        S.timebase = bump ((C_t1-C_t0) / (S.right - S.left), S.tbase_list, '>=', tbmax);    elseif C_t1-C_t0 < S_t1-S_t0 & strcmp (opt, 'shrink');        S.timebase = bump ((C_t1-C_t0) / (S.right - S.left), S.tbase_list, '<=');    end;function S = touch (S, C, opt, tbmax)    if nargin<3; opt=''; end;    C_t0 = C.time + C.left*C.timebase;    C_t1 = C.time + C.right*C.timebase;    S_t0 = S.time + S.left*S.timebase;    S_t1 = S.time + S.right*S.timebase;    if C_t1-C_t0 > S_t1-S_t0 & strcmp (opt, 'stretch');        S.timebase = bump ((C_t1-C_t0) / (S.right - S.left), S.tbase_list, '>=', tbmax);        S.time = set_time (S, 'c', (C_t0 + C_t1)/2);    elseif C_t1-C_t0 < S_t1-S_t0 & strcmp (opt, 'shrink');        S.timebase = bump ((C_t1-C_t0) / (S.right - S.left), S.tbase_list, '<=');  %      S.time = set_time (S, 'c', (C_t0 + C_t1)/2);    elseif C_t0 < S_t0 & ~strcmp (opt, 'shrink');         S.time = set_time (S, 'l', C_t0);    elseif C_t1 > S_t1 & strcmp (opt, 'play');        t1 = set_time (S, '>');        t2 = set_time (S, 'r', C_t1);        S.time = max(t1, t2);    elseif C_t1 > S_t1 & ~strcmp (opt, 'shrink');        S.time = set_time (S, 'r', C_t1);    end;function plot_changes (old, mode)    global SETS     if nargin<2; mode = 'norm'; end;    normal = strcmp (mode, 'norm');    closeup_change = SETS.closeup.timebase ~= old.closeup.timebase | SETS.closeup.time ~= old.closeup.time;    signal_change = SETS.signal.timebase ~= old.signal.timebase | SETS.signal.time ~= old.signal.time;    firing_change = SETS.firing.timebase ~= old.firing.timebase | SETS.firing.time ~= old.firing.time;    navigation_change = SETS.navigation.timebase ~= old.navigation.timebase | SETS.navigation.time ~= old.navigation.time;        if navigation_change;        emgplot ({'map', 'navigation'});    elseif closeup_change | signal_change | firing_change;        emgplot ('navigation cursors');    end;    if closeup_change & normal;        emgplot ('closeup');    end;    if signal_change;        if normal; emgplot ('signal'); end;    elseif closeup_change & normal;        emgplot ('signal cursor');    end;    if firing_change;        emgplot ('firing');        if strcmp (SETS.template.style, 'normal');        else            emgplot ('templates');        end;    elseif signal_change;        emgplot ('firing cursors');    end;    if SETS.signal.timebase ~= old.signal.timebase         emgplot ('templates')    end               