function simulator
addpath(cd);
addpath(fullfile(cd,'m files'));
matlabVersion=version;
%if the matlab version is lower than 7
%than do not use the java progress
%because there is no javaaddpath
%you can manualy add the path to the
%$matlabroot/toolbox/local/classpath.txt
if(str2num(matlabVersion(1))>6)
    warning off all
    javaaddpath('SPM.jar');%#ok
    warning on all
end
%Configuration default settings
%group-1-general
%group-2-contraction
%group-3-electrode
contractionLevelAsPercentMVC=struct(...
	'value','5.0',...
	'range',0,...
	'group',2,...
	'dependent',[]);

nmu_in_mscl=struct(...
	'value','200',...
	'range',0,...
	'group',1,...
	'dependent',[]);

electrode_type=struct(...
	'value','2',...
	'range',[1 4],...
	'group',3,...
	'dependent',[]);

generateMFPsWithoutInitiation=struct(...
	'value','0',...
	'group',1,...
	'range',[0 1],...
	'dependent',[]);

pathology_neuropathy_MU_loss_fraction=struct(...
	'value','0.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_neuropathy_dist=struct(...
	'value','150',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_neuropathy_enlargement_fraction=struct(...
	'value','1.5',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_myopathy_fibre_affected_fraction=struct(...
	'value','0.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_myopathy_percentage_new_involvement=struct(...
	'value','5',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_myopathic_fibre_gradually_dying=struct(...
	'value','0',...
	'range',[0 1],...
	'group',1,...
	'dependent',[]);

pathology_myopathic_dependent_procedure=struct(...
	'value','1',...
	'range',[0 1],...
	'group',1,...
	'dependent',[]);

pathology_myopathy_death_threshold=struct(...
	'value','25.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_myopathy_percentage_affected_dying=struct(...
	'value','0.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_myopathy_hypertrophy_fraction=struct(...
	'value','0.05',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_myopathy_hypertrophy_allowed_fraction=struct(...
	'value','2.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_myopathy_percentage_hypertrophy_split=struct(...
	'value','0.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_myopathicAtrophyRate=struct(...
	'value','0.96',...
	'range',0,...
	'group',1,...
	'dependent',[]);

pathology_myopathicHypertrophyRate=struct(...
	'value','1.04',...
	'range',0,...
	'group',1,...
	'dependent',[]);

tipUptakeDistance=struct(...
	'value','4500',...
	'group',1,...
	'range',0,...
	'dependent',[]);

canUptakeDistance=struct(...
	'value','4500',...
	'group',1,...
	'range',0,...
	'dependent',[]);

canPhysicalRadius=struct(...
	'value','250',...
	'group',3,...
	'range',0,...
	'dependent',[]);

cannula_length=struct(...
	'value','10.0',...
	'group',3,...
	'range',0,...
	'dependent',[]);

needle_x_position=struct(...
	'value','0.0',...
	'group',2,...
	'range',0,...
	'dependent',[]);

needle_y_position=struct(...
	'value','0.0',...
	'group',2,...
	'range',0,...
	'dependent',[]);

needle_z_position=struct(...
	'value','15.0',...
	'group',2,...
	'range',0,...
	'dependent',[]);

needleReferenceSetup=struct(...
	'value','3',...
	'range',[1 3],...
	'group',3,...
	'dependent',[]);

doJitter=struct(...
	'value','1',...
	'range',[0 1],...
	'group',1,...
	'dependent','jitter,jitterAccThresh');

jitter=struct(...
	'value','25',...
	'range',0,...
	'group',1,...
	'dependent',[]);

jitterAccThresh=struct(...
	'value','10',...
	'range',0,...
	'group',1,...
	'dependent',[]);

% genJitterSeeds=struct(...
% 	'value','0',...
% 	'range',[0 1],...
% 	'group',1,...
% 	'dependent',[]);

minimumMuscleMetricThreshold=struct(...
	'value','0.25',...
	'group',3,...
	'range',0,...
	'dependent',[]);

filter_raw_signal=struct(...
	'value','0',...
	'range',[0 1],...
	'group',1,...
	'dependent',[]);

use_noise=struct(...
	'value','1',...
	'range',[0 1],...
	'group',3,...
	'dependent','signalToNoiseRatio');

signalToNoiseRatio=struct(...
	'value','25.0',...
	'range',0,...
	'group',3,...
	'dependent','signalToNoiseRatio');

operator_name=struct(...
	'value','Simulated Operator',...
	'group',1,...
	'range',[],...
	'dependent',[]);

patient_name=struct(...
	'value','Simulated Patient',...
	'group',1,...
	'range',[],...
	'dependent',[]);

muscle_description=struct(...
	'value','Biceps Brachii',...
	'group',1,...
	'range',[],...
	'dependent',[]);

patient_id=struct(...
	'value','0',...
	'group',1,...
	'range',0,...
	'dependent',[]);

muscle_side=struct(...
	'value','2',...
	'range',[1 3],...
	'group',1,...
	'dependent',[]);

new_operator=struct(...
	'value','0',...
	'range',[0 1],...
	'group',1,...
	'dependent',[]);

new_patient=struct(...
	'value','0',...
	'range',[0 1],...
	'group',1,...
	'dependent',[]);

new_muscle=struct(...
	'value','0',...
	'range',[0 1],...
	'group',1,...
	'dependent',[]);

LAST_OUTPUT=struct(...
	'value','',...
	'range',[],...
	'group',1,...
	'dependent',[]);

useLastMuscle=struct(...
	'value','0',...
	'range',[0 1],...
	'group',1,...
	'dependent',[]);

useOldFiringTimes=struct(...
	'value','0',...
	'range',[0 1],...
	'group',1,...
	'dependent',[]);

patient_dir_name=struct(...
	'value','patient',...
	'range',[],...
	'group',1,...
	'dependent',[]);

firing_maximumFiringThreshold=struct(...
	'value','50',...
	'range',0,...
	'group',1,...
	'dependent',[]);

emg_elapsed_time=struct(...
	'value','30',...
	'range',0,...
	'group',1,...
	'dependent',[]);

maxShortVoltage=struct(...
	'value','4096',...
	'range',0,...
	'group',1,...
	'dependent',[]);

jitterInterpExp=struct(...
	'value','30.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

mscl_fib_dens=struct(...
	'value','10.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

mscl_area_per_fib=struct(...
	'value','0.0025',...
	'range',0,...
	'group',1,...
	'dependent',[]);

min_mu_diam=struct(...
	'value','2.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

max_mu_diam=struct(...
	'value','8.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

firing_recruitmentSlope=struct(...
	'value','0.8',...
	'range',0,...
	'group',1,...
	'dependent',[]);

firing_minimumFiringRate=struct(...
	'value','8.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

firing_maximumFiringRate=struct(...
	'value','42.0',...
	'range',0,...
	'group',1,...
	'dependent',[]);

coefficientOfVarianceInFiringTimes=struct(...
	'value','0.25',...
	'range',0,...
	'group',1,...
	'dependent',[]);

mu_layout_type=struct(...
	'value','1',...
	'range',[1 2],...
	'group',1,...
	'dependent',[]);

generate_second_channel=struct(...
	'value','0',...
	'range',[0 1],...
	'group',1,...
	'dependent',[]);

recordMFPPeakToPeak=struct(...
	'value','0',...
	'range',[0 1],...
	'group',1,...
	'dependent',[]);

simulatormfc=struct(...
	'contractionLevelAsPercentMVC',contractionLevelAsPercentMVC,...
	'nmu_in_mscl',nmu_in_mscl,...
	'electrode_type',electrode_type,...
	'generateMFPsWithoutInitiation',generateMFPsWithoutInitiation,...
	'pathology_neuropathy_MU_loss_fraction',pathology_neuropathy_MU_loss_fraction,...
	'pathology_neuropathy_dist',pathology_neuropathy_dist,...
	'pathology_neuropathy_enlargement_fraction',pathology_neuropathy_enlargement_fraction,...
	'pathology_myopathy_fibre_affected_fraction',pathology_myopathy_fibre_affected_fraction,...
	'pathology_myopathy_percentage_new_involvement',pathology_myopathy_percentage_new_involvement,...
	'pathology_myopathic_fibre_gradually_dying',pathology_myopathic_fibre_gradually_dying,...
	'pathology_myopathic_dependent_procedure',pathology_myopathic_dependent_procedure,...
	'pathology_myopathy_death_threshold',pathology_myopathy_death_threshold,...
	'pathology_myopathy_percentage_affected_dying',pathology_myopathy_percentage_affected_dying,...
	'pathology_myopathy_hypertrophy_fraction',pathology_myopathy_hypertrophy_fraction,...
	'pathology_myopathy_hypertrophy_allowed_fraction',pathology_myopathy_hypertrophy_allowed_fraction,...
	'pathology_myopathy_percentage_hypertrophy_split',pathology_myopathy_percentage_hypertrophy_split',...
	'pathology_myopathicAtrophyRate',pathology_myopathicAtrophyRate,...
	'pathology_myopathicHypertrophyRate',pathology_myopathicHypertrophyRate,...
	'tipUptakeDistance',tipUptakeDistance,...
	'canUptakeDistance',canUptakeDistance,...
	'canPhysicalRadius',canPhysicalRadius,...
	'cannula_length',cannula_length,...
	'needle_x_position',needle_x_position,...
	'needle_y_position',needle_y_position,...
	'needle_z_position',needle_z_position,...
	'needleReferenceSetup',needleReferenceSetup,...
	'doJitter',doJitter,...
	'jitter',jitter,...
	'jitterAccThresh',jitterAccThresh,...
	'minimumMuscleMetricThreshold',minimumMuscleMetricThreshold,...
	'filter_raw_signal',filter_raw_signal,...
	'use_noise',use_noise,...
	'signalToNoiseRatio',signalToNoiseRatio,...
	'operator_name',operator_name,...
	'patient_name',patient_name,...
	'muscle_description',muscle_description,...
	'patient_id',patient_id,...
	'muscle_side',muscle_side,...
	'new_operator',new_operator,...
	'new_patient',new_patient,...
	'new_muscle',new_muscle,...
	'LAST_OUTPUT',LAST_OUTPUT,...
	'useLastMuscle',useLastMuscle,...
	'useOldFiringTimes',useOldFiringTimes,...
	'patient_dir_name',patient_dir_name,...
	'firing_maximumFiringThreshold',firing_maximumFiringThreshold,...
	'emg_elapsed_time',emg_elapsed_time,...
	'maxShortVoltage',maxShortVoltage,...
	'jitterInterpExp',jitterInterpExp,...
	'mscl_fib_dens',mscl_fib_dens,...
	'mscl_area_per_fib',mscl_area_per_fib,...
	'min_mu_diam',min_mu_diam,...
	'max_mu_diam',max_mu_diam,...
	'firing_recruitmentSlope',firing_recruitmentSlope,...
	'firing_minimumFiringRate',firing_minimumFiringRate,...
	'firing_maximumFiringRate',firing_maximumFiringRate,...
	'coefficientOfVarianceInFiringTimes',coefficientOfVarianceInFiringTimes,...
	'mu_layout_type',mu_layout_type,...
	'generate_second_channel',generate_second_channel,...
	'recordMFPPeakToPeak',recordMFPPeakToPeak);


%%%%%%%%%%%%%%%%%%Preferences %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Preferences Default settings
configFile=fullfile(cd,'default.cfg');
dataDir = fullfile(cd,'Data');
preferences= struct(...
	'runOptionDialog', '0',...
	'configFile',configFile,...
	'outputFileName','micro',...
	'allUnits','0',...
	'DataDirectory',dataDir);

fid=fopen('simulator.prefs');
if(fid~=-1)
	tline=fgetl(fid);
	while tline~=-1
		[field,count,errmsg,nextIndex]=sscanf(tline,'%s',1);
		if(isfield(preferences,field))
			tline=tline(nextIndex+1:end);
			preferences=setfield(preferences,field,tline);
		end

		tline=fgetl(fid);
	end
	fclose(fid);
end

if(~isdir(preferences.DataDirectory))
	preferences.DataDirectory=cd;
end
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Get the screen size
screenSize=get(0,'ScreenSize');
screenHeight=screenSize(4);
screenWidth=screenSize(3);

%figure height and width
figureWidth=525;
figureHeight=500;
backGroundColor=[0.98,0.98,0.98];
%margin
margin=0.01;

%Main figure
f=figure(...
	'Name','EMG Simulator',...
	'NumberTitle','off',...
	'MenuBar','none',...
	'Units','pix',...
	'Resize','off',...
	'Color',backGroundColor,...
	'defaultaxesxtick', [], ...
	'defaultaxesytick', [], ...
	'defaultuicontrolcallback',@checkValue,...
	'pos',[(screenWidth-figureWidth)/2,(screenHeight-figureHeight)/2,figureWidth,figureHeight]);

%----------------------Figure User Data----------------------------------
% The figure USerData conatins the handles of the tabs,
% the curent configuration

figureData= struct(...
	'simulatormfc',simulatormfc,...
	'preferences', preferences);

set(f,'UserData',figureData);

%----------------------------Main Panel ----------------------------------------

panelHeight=0.98;
generalRowHeight=panelHeight/22;
leftPanelMargin=0.05;
editBoxPosX=0.30;
textBoxWidth=0.12;
browseField=0.50;
editBoxWidth=0.35;
checkBoxPosX=0.05;
editBoxStartY=panelHeight+margin;


%======================================================

%%%%%%%%%%%%%%%%%%%%%%%%UICONTROLS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%----------------------ROW 1--------------------------------------------
editBoxY=2.5*generalRowHeight;
h=uicontrol(...
	'style','text',...
	'String','Muscle:',...
	'Units','norm',...
	'BackgroundColor',backGroundColor,...
	'horizontalAlignment','left',...
	'pos',[leftPanelMargin,editBoxStartY-editBoxY-0.25*generalRowHeight,textBoxWidth,generalRowHeight]);
defaultFontName= get(h,'FontName');
defaultFontSize= get(h,'FontSize');

%--------Set default font and Size--------------
set(f,...
	'defaultuicontrolFontName',defaultFontName,...
	'defaultuicontrolFontSize',defaultFontSize);
%---------------------------------------------
[mpath,mname,mext,mversn]=fileparts(preferences.configFile);
str{1}='Generic';
str{2}='__________';
str{3}='Custom...';
muscleFileField=uicontrol(...
	'style','popup',...
	'Tag','currentMuscle',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'BackgroundColor',backGroundColor,...
	'String',str,...
	'Callback',@selectMuscle,...
	'pos',[leftPanelMargin+textBoxWidth+margin,editBoxStartY-editBoxY,editBoxWidth-0.01,generalRowHeight]);


muscle=struct(...
	'muscleName','Generic',...
	'muscleCFG',simulatormfc);

muscles(1)=muscle;
set(muscleFileField,'UserData',muscles);
loadAvailableMuscles(muscleFileField);
% uicontrol(...
% 	'style','pushbutton',...
% 	'Tag','Browse',...
% 	'String','Browse',...
% 	'Callback',@loadCFGFile,...
% 	'Units','norm',...
% 	'UserData',muscleFileField,...
% 	'pos',[leftPanelMargin+textBoxWidth+browseField+margin,editBoxStartY-editBoxY,0.15,generalRowHeight]);

uicontrol(...
	'style','pushbutton',...
	'Tag','Edit',...
	'String','Edit',...
	'Units','norm',...
	'Callback','newMuscle',...
	'UserData',muscleFileField,...
	'pos',[1-leftPanelMargin-2*0.15,editBoxStartY-editBoxY,0.15,generalRowHeight]);

%-----------------------------ROW 2 ---------------------------------------
editBoxY=editBoxY+2.5*generalRowHeight;
uicontrol(...
	'style','text',...
	'String','Electrode:',...
	'Units','norm',...
	'BackgroundColor',backGroundColor,...
	'horizontalAlignment','left',...
	'pos',[leftPanelMargin,editBoxStartY-editBoxY-0.25*generalRowHeight,textBoxWidth,generalRowHeight]);
str=[];
str{1}='1';
str{2}='Add...';


electrodeNumH=uicontrol(...
	'style','popup',...
	'Tag','electrodeNum',...
	'String',str,...
	'Units','norm',...
	'BackgroundColor',backGroundColor,...
	'horizontalAlignment','left',...
	'Callback',@changeElectrode,...
	'Visible','off',...
	'pos',[leftPanelMargin+textBoxWidth+margin,editBoxStartY-editBoxY,0.10,generalRowHeight]);



str{1}='Generic';
str{2}='__________';
str{3}='Custom...';

electrodeNameH=uicontrol(...
	'style','popup',...
	'String',str,...
	'Tag','electrodeName',...
	'Units','norm',...
	'BackgroundColor',backGroundColor,...
	'horizontalAlignment','left',...
	'Callback',@selectElectrode,...
	'pos',[leftPanelMargin+textBoxWidth+margin,editBoxStartY-editBoxY,editBoxWidth-0.01,generalRowHeight]);

editElectrodeH=uicontrol(...
	'style','pushbutton',...
	'Tag','Edit',...
	'String','Edit',...
	'Callback',@editElectrode,...
	'Visible','on',...
	'Units','norm',...
	'pos',[1-leftPanelMargin-2*0.15,editBoxStartY-editBoxY,0.15,generalRowHeight]);

deleteElectrodeH=uicontrol(...
	'style','pushbutton',...
	'Tag','Delete',...
	'String','Delete',...
	'Units','norm',...
	'Visible','off',...
	'Callback',@deleteElectrode,...
	'pos',[1-leftPanelMargin-0.15,editBoxStartY-editBoxY,0.15,generalRowHeight]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Electrode structures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% electrodeHandles contains the handles of all the electrode uicontrols
electrodeHandles=struct(...
	'electrodeNumH',electrodeNumH,...
	'electrodeNameH',electrodeNameH,...
	'editElectrodeH',editElectrodeH,...
	'deleteElectrodeH',deleteElectrodeH);

set(editElectrodeH,'UserData',electrodeHandles);
set(deleteElectrodeH,'UserData',electrodeHandles);

% electrodeNumH User Data
% handle of all the electrode uicontrols
% electrodeIndexArray  the coresponding electrode value
electrodeIndexArray(1)=1;
electrodeNumStruct=struct(...
	'electrodeHandles',electrodeHandles,...
	'electrodeIndexArray',electrodeIndexArray);

set(electrodeNumH,'UserData',electrodeNumStruct);



electrode=struct(...
	'electrodeName','Generic',...
	'electrodeCFG',simulatormfc);

electrodes(1)=electrode;

electrodeNameStruct=struct(...
	'electrodeHandles',electrodeHandles,...
	'electrodes',electrodes(1));


set(electrodeNameH,'UserData',electrodeNameStruct);
loadAvailableElectrodes(electrodeNameH);

%-----------------------------ROW 3 ---------------------------------------
editBoxY=editBoxY+1.5*generalRowHeight;
%Multiple Electrodes checkbox
%the UserData field contains the handles of the electrode popups
uicontrol(...
	'style','checkbox',...
	'Tag','MultipleElectrodes',...
	'String','Multiple Electrodes',...
	'Units','norm',...
	'BackgroundColor',backGroundColor,...
	'UserData',electrodeHandles,....
	'Callback',@multipleElectrodes,...
	'horizontalAlignment','left',...
	'pos',[leftPanelMargin+textBoxWidth+margin,editBoxStartY-editBoxY,editBoxWidth,generalRowHeight]);

uicontrol(...
	'style','pushbutton',...
	'String','Advanced',...
	'Units','norm',...
	'UserData',electrodeHandles,....
	'Callback','preferences',...
	'pos',[1-leftPanelMargin-0.30,editBoxStartY-editBoxY,0.30,generalRowHeight]);
%--------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Simulation Panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%
editBoxY=editBoxY+generalRowHeight;
panel=axes(...
	'color',backGroundColor,...
	'Units','norm',...
	'Box','on',...
	'pos',[leftPanelMargin,editBoxStartY-editBoxY-12.5*generalRowHeight,1-2*leftPanelMargin,12.5*generalRowHeight]);

uicontrol(...
	'style','text',...
	'String','  Simulations',...
	'Units','norm',...
	'BackgroundColor',backGroundColor,...
	'horizontalAlignment','left',...
	'pos',[leftPanelMargin+0.05,editBoxStartY-editBoxY-0.75*generalRowHeight,0.15,generalRowHeight]);
%-------------------------------Row1--------------------------------
editBoxY=editBoxY+2.5*generalRowHeight;
uicontrol(...
	'style','text',...
	'String','Output directory:',...
	'Units','norm',...
	'BackgroundColor',backGroundColor,...
	'horizontalAlignment','left',...
	'pos',[leftPanelMargin+0.01,editBoxStartY-editBoxY-0.25*generalRowHeight,0.3,generalRowHeight]);

outputDirFieldH=uicontrol(...
	'style','edit',...
	'Tag','DataDirectory',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'Callback',@updatePrefs,...
	'String',preferences.DataDirectory,...
	'BackgroundColor',backGroundColor,...
	'UserData',f,...
	'pos',[leftPanelMargin+0.01+0.3,editBoxStartY-editBoxY,editBoxWidth,generalRowHeight]);

uicontrol(...
	'style','pushbutton',...
	'Tag','outputDir',...
	'Units','norm',...
	'String','Browse',...
	'Callback',@getDirectory,...
	'UserData',outputDirFieldH,...
	'pos',[1-leftPanelMargin-0.01-0.15,editBoxStartY-editBoxY,0.15,generalRowHeight]);
%-------------------------------Row2--------------------------------
editBoxY=editBoxY+2.5*generalRowHeight;
uicontrol(...
	'style','text',...
	'String','Output root filename:',...
	'Units','norm',...
	'BackgroundColor',backGroundColor,...
	'horizontalAlignment','left',...
	'pos',[leftPanelMargin+0.01,editBoxStartY-editBoxY-0.25*generalRowHeight,0.3,generalRowHeight]);

uicontrol(...
	'style','edit',...
	'Tag','outputFileName',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'Callback',@updatePrefs,...
	'String',preferences.outputFileName,...
	'BackgroundColor',backGroundColor,...
	'UserData',f,...
	'pos',[leftPanelMargin+0.01+0.3,editBoxStartY-editBoxY,editBoxWidth,generalRowHeight]);

%-------------------------------Row3--------------------------------
editBoxY=editBoxY+2.5*generalRowHeight;
uicontrol(...
	'style','text',...
	'String','Signal duration (sec):',...
	'Units','norm',...
	'BackgroundColor',backGroundColor,...
	'horizontalAlignment','left',...
	'pos',[leftPanelMargin+0.01,editBoxStartY-editBoxY-0.25*generalRowHeight,0.3,generalRowHeight]);

uicontrol(...
	'style','edit',...
	'Tag','emg_elapsed_time',...
	'Units','norm',...
	'horizontalAlignment','right',...
	'String',simulatormfc.emg_elapsed_time.value,...
	'BackgroundColor',backGroundColor,...
	'UserData',f,...
	'pos',[leftPanelMargin+0.01+0.3,editBoxStartY-editBoxY,editBoxWidth/2,generalRowHeight]);
%------------------------Row4----------------------------------------------

editBoxY=editBoxY+2.5*generalRowHeight;
uicontrol(...
	'style','text',...
	'Tag','Contraction',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'String','Contraction',...
	'BackgroundColor',backGroundColor,...
	'UserData',f,...
	'pos',[leftPanelMargin+0.01,editBoxStartY-editBoxY,0.25,generalRowHeight]);

uicontrol(...
	'style','text',...
	'Tag','MVC',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'String','%MVC',...
	'BackgroundColor',backGroundColor,...
	'UserData',f,...
	'pos',[leftPanelMargin+0.15,editBoxStartY-editBoxY,0.25,generalRowHeight]);


uicontrol(...
	'style','text',...
	'Tag','',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'String','Electrode:',...
	'BackgroundColor',backGroundColor,...
	'UserData',f,...
	'pos',[leftPanelMargin+0.25,editBoxStartY-editBoxY,0.15,generalRowHeight]);

contractionElectrodeH=uicontrol(...
	'style','popup',...
	'Tag','electrodeIndex',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'String','Generic',...
	'BackgroundColor',backGroundColor,...
	'Callback',@getElectrodePosition,...
	'pos',[leftPanelMargin+0.02+0.40,editBoxStartY-editBoxY+0.25*generalRowHeight,0.30,generalRowHeight]);
%------------------------Row4----------------------------------------------
editBoxY=editBoxY+generalRowHeight;

str=[];
str{1}='1';
str{2}='Add...';

contractionH=uicontrol(...
	'style','popup',...
	'Tag','ContractionNum',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'String',str,...
	'BackgroundColor',backGroundColor,...
	'Callback',@changeContraction,...
	'pos',[leftPanelMargin+0.01,editBoxStartY-editBoxY,0.10,generalRowHeight]);



MVCH=uicontrol(...
	'style','edit',...
	'Tag','contractionLevelAsPercentMVC',...
	'Units','norm',...
	'horizontalAlignment','right',...
	'String',simulatormfc.contractionLevelAsPercentMVC.value,...
	'BackgroundColor',backGroundColor,...
	'Callback',@updateContraction,...
	'UserData',contractionH,...
	'pos',[leftPanelMargin+0.15,editBoxStartY-editBoxY,0.075,generalRowHeight]);
uicontrol(...
	'style','text',...
	'Tag','',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'String','Position:',...
	'BackgroundColor',backGroundColor,...
	'UserData',f,...
	'pos',[leftPanelMargin+0.25,editBoxStartY-editBoxY-0.25*generalRowHeight,0.25,generalRowHeight]);
uicontrol(...
	'style','text',...
	'Tag','Electrode',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'String','X:',...
	'BackgroundColor',backGroundColor,...
	'UserData',f,...
	'pos',[leftPanelMargin+0.01+0.34,editBoxStartY-editBoxY-0.25*generalRowHeight,0.10,generalRowHeight]);

positionXH=uicontrol(...
	'style','edit',...
	'Tag','needle_x_position',...
	'Units','norm',...
	'horizontalAlignment','right',...
	'String',simulatormfc.needle_x_position.value,...
	'BackgroundColor',backGroundColor,...
	'Callback',@setElectrodePosition,...
	'UserData',contractionH,...
	'pos',[leftPanelMargin+0.01+0.37,editBoxStartY-editBoxY,0.075,generalRowHeight]);

uicontrol(...
	'style','text',...
	'Tag','Electrode',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'String','Y:',...
	'BackgroundColor',backGroundColor,...
	'UserData',f,...
	'pos',[leftPanelMargin+0.01+0.48,editBoxStartY-editBoxY-0.25*generalRowHeight,0.10,generalRowHeight]);

positionYH=uicontrol(...
	'style','edit',...
	'Tag','needle_y_position',...
	'Units','norm',...
	'horizontalAlignment','right',...
	'String',simulatormfc.needle_y_position.value,...
	'BackgroundColor',backGroundColor,...
	'Callback',@setElectrodePosition,...
	'UserData',contractionH,...
	'pos',[leftPanelMargin+0.01+0.51,editBoxStartY-editBoxY,0.075,generalRowHeight]);

uicontrol(...
	'style','text',...
	'Tag','Electrode',...
	'Units','norm',...
	'horizontalAlignment','left',...
	'String','Z:',...
	'BackgroundColor',backGroundColor,...
	'UserData',f,...
	'pos',[leftPanelMargin+0.01+0.62,editBoxStartY-editBoxY-0.25*generalRowHeight,0.10,generalRowHeight]);

positionZH=uicontrol(...
	'style','edit',...
	'Tag','needle_z_position',...
	'Units','norm',...
	'horizontalAlignment','right',...
	'String',simulatormfc.needle_z_position.value,...
	'BackgroundColor',backGroundColor,...
	'Callback',@setElectrodePosition,...
	'UserData',contractionH,...
	'pos',[leftPanelMargin+0.01+0.65,editBoxStartY-editBoxY,0.075,generalRowHeight]);

% deleteIcon=load('guiData.mat');
% deleteIcon=deleteIcon.deleteIcon;


deleteButtonH=uicontrol(...
	  'style','pushbutton',...
	  'Tag','DeleteIcon',...
	  'TooltipString','delete contraction',...
	  'Units','norm',...
	  'String','Delete',...
	  'Callback',@deleteContraction,...
	  'UserData',contractionH,...
	  'vis','off',...
	  'pos',[1-leftPanelMargin-0.01-0.15,editBoxStartY-editBoxY,0.15,generalRowHeight]);


contractionHandles=struct(...
	'contractionNumH',contractionH,...
	'contractionElectrodeH',contractionElectrodeH,...
	'MVCH',MVCH,...
	'positionXH',positionXH,...
	'positionYH',positionYH,...
	'positionZH',positionZH,...
    'deleteButtonH',deleteButtonH);



contraction=struct(...
	'contractionLevelAsPercentMVC',simulatormfc.contractionLevelAsPercentMVC.value,...
	'needle_x_position',str2num(simulatormfc.needle_x_position.value),...
	'needle_y_position',str2num(simulatormfc.needle_y_position.value),...
	'needle_z_position',str2num(simulatormfc.needle_z_position.value));
	
contractions(1)=contraction;

contractionUserData=struct(...
	'contractionHandles',contractionHandles,...
	'contractions',contractions);

set(contractionH,'UserData',contractionUserData);


contractionElectrodeUserData=struct(...
	         'contractionHandles',contractionHandles);
		 
set(contractionElectrodeH,'UserData',contractionElectrodeUserData);


%------------------------Row 5----------------------------------------------
editBoxY=editBoxY+3*generalRowHeight;
uicontrol(...
	'style','pushbutton',...
	'Tag','MVC',...
	'Units','norm',...
	'String','Run Simulation',...
	'CallBack',@runSimulator,...
	'UserData',contractionH,...
	'pos',[leftPanelMargin,editBoxStartY-editBoxY,0.3,generalRowHeight]);

uicontrol(...
	'style','pushbutton',...
	'Tag','MVC',...
	'Units','norm',...
	'String','Cancel',...
	'Callback',@cancel,...
	'UserData',f,...
	'pos',[1-leftPanelMargin-0.3,editBoxStartY-editBoxY,0.3,generalRowHeight]);
updateContractionElectrodes(electrodeHandles.electrodeNumH);
fillIn(f,f);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%getConfigFile
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function getConfigFile(src,evnt)
configFileField=get(gcbo,'UserData');
simFig=get(configFileField,'UserData');
figureData=get(simFig,'UserData');
preferences=figureData.preferences;
[filename,pathname,filterindex]= uigetfile('.cfg');
configFile=fullfile(pathname,filename);

if(configFile~=0)
	set(configFileField,'String',configFile);
	preferences.configFile =configFile;
	figureData.preferences=preferences;
	set(simFig,'UserData',figureData);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%getDirectory
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function getDirectory(src,evnt)
directoryField=get(gcbo,'UserData');
simFig=get(directoryField,'UserData');
figureData=get(simFig,'UserData');
preferences=figureData.preferences;
directoryName= uigetdir(preferences.DataDirectory);

if(directoryName~=0)
	set(directoryField,'String',directoryName);
	preferences.DataDirectory =directoryName;
	figureData.preferences=preferences;
	set(simFig,'UserData',figureData);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%multipleElectrodes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function multipleElectrodes(src,evnt)
electrodePopupsH=get(gcbo,'UserData');
checkedMultipleElectrode=get(gcbo,'Value');
numWidth=0.10;
%position of the elctorde name popup
posElectrodeNameP=get(electrodePopupsH.electrodeNameH,'pos');

if(checkedMultipleElectrode)
	posElectrodeNameP(1)=posElectrodeNameP(1)+numWidth;
	set(electrodePopupsH.electrodeNameH,'pos',posElectrodeNameP);
	set(electrodePopupsH.electrodeNumH,'vis','on');
	set(electrodePopupsH.editElectrodeH,'vis','on');
	userData=get(electrodePopupsH.electrodeNumH,'userData');
	if(length(userData.electrodeIndexArray)>1)
		set(electrodePopupsH.deleteElectrodeH,'vis','on');
	end
		
	
else
	posElectrodeNameP(1)=posElectrodeNameP(1)-numWidth;
	set(electrodePopupsH.electrodeNameH,'pos',posElectrodeNameP);
	set(electrodePopupsH.electrodeNumH,'vis','off');
	set(electrodePopupsH.electrodeNumH,'Value',1);
	userData=get(electrodePopupsH.electrodeNumH,'userData');
	set(electrodePopupsH.electrodeNameH,'Value',userData.electrodeIndexArray(1));
	%set(electrodePopupsH.editElectrodeH,'vis','off');
	set(electrodePopupsH.deleteElectrodeH,'vis','off');
end
updateContractionElectrodes(electrodePopupsH.electrodeNumH)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%changeElectrode
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function changeElectrode(src,evnt)
strValues=get(gcbo,'String');
value=get(gcbo,'value');
currentSelection=strValues(value,:);
userData=get(gcbo,'UserData');
electrodeHandles=userData.electrodeHandles;
electrodeIndexArray=userData.electrodeIndexArray;

switch (currentSelection{1})
	case 'Add...'
		for i=1:value;
			str{i}=num2str(i);
		end
		str{end+1}='Add...';
		set(gcbo,'String',str);
		parentf=get(gcbo,'parent');
		contractionNumH=findobj(parentf,'Tag','ContractionNum');
		contractionUserData=get(contractionNumH,'UserData');
        contractions=contractionUserData.contractions;
		for i=1:length(contractions)
			contractions(i).needle_x_position(end+1)=contractions(i).needle_x_position(end);
			contractions(i).needle_y_position(end+1)=contractions(i).needle_y_position(end);
			contractions(i).needle_z_position(end+1)=contractions(i).needle_z_position(end);
		end
	    contractionUserData.contractions=contractions;
		set(contractionNumH,'UserData',contractionUserData);
		
		electrodeIndexArray(end+1)=get(electrodeHandles.electrodeNameH,'Value');
		set(electrodeHandles.deleteElectrodeH,'vis','on');
		userData.electrodeIndexArray=electrodeIndexArray;
		set(gcbo,'UserData', userData);
		updateContractionElectrodes(electrodeHandles.electrodeNumH);
	otherwise
		set(electrodeHandles.electrodeNameH,'Value',electrodeIndexArray(value));


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%deleteElectrode
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function deleteElectrode(src,evnt)
electrodeHandles=get(gcbo,'UserData');

%get the existing electrodes
userData=get(electrodeHandles.electrodeNumH,'UserData');
electrodeIndexArray=userData.electrodeIndexArray;
%if there are more than one electrodes
if(length(electrodeIndexArray)>1)
	%get the number of the selected electrode
	selectedElectrode=get(electrodeHandles.electrodeNumH,'value');
	for i=selectedElectrode:length(electrodeIndexArray)-1
		electrodeIndexArray(i)=electrodeIndexArray(i+1);
	end
	electrodeIndexArray=electrodeIndexArray(1:end-1);
	for i=1:length(electrodeIndexArray)
		str{i}=num2str(i);
	end
	str{end+1}='Add...';
	if(selectedElectrode>1)
		newSelectedValue=selectedElectrode-1;
	else
		newSelectedValue=1;
		
	end
	userData.electrodeIndexArray=electrodeIndexArray;
	set(electrodeHandles.electrodeNumH,'String',str);
	set(electrodeHandles.electrodeNumH,'Value',newSelectedValue);
	set(electrodeHandles.electrodeNameH,'Value',electrodeIndexArray(newSelectedValue));
	set(electrodeHandles.electrodeNumH,'UserData',userData);
   if(length(electrodeIndexArray)<2)
		set(gcbo,'Visible','off');
   end
   updateContractionElectrodes(electrodeHandles.electrodeNumH);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%selectElectrode
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function selectElectrode(src,evnt)
userData=get(gcbo,'UserData');
electrodeHandles=userData.electrodeHandles;
selectedValue=get(gcbo,'Value');
str=get(gcbo,'String');
selectedStr=str(selectedValue,:);
switch (selectedStr{1})
	case 'Custom...'
% 		electrode=struct(...
% 	      'electrodeName','Generic',...
% 	      'electrodeCFG',simulatormfc);
		
		newElectrode(gcbo);
% 	case '__________'
% 		
% 		value=get(gcbo,'Value');
% 		set(gcbo,'Value',value+1);
% 		newElectrode(gcbo);

	otherwise
		electrodeNumStruct=get(electrodeHandles.electrodeNumH,'UserData');
		electrodeNumValue=get(electrodeHandles.electrodeNumH,'Value');
		electrodeIndexArray=electrodeNumStruct.electrodeIndexArray;
		electrodeIndexArray(electrodeNumValue)=selectedValue;
		electrodeNumStruct.electrodeIndexArray=electrodeIndexArray;
		set(electrodeHandles.electrodeNumH,'UserData',electrodeNumStruct);
		updateContractionElectrodes(electrodeHandles.electrodeNumH);
		

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%loadAvailableElectrodes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function loadAvailableElectrodes(electrodeNameH);
userData=get(electrodeNameH,'userData');
electrode=userData.electrodes(1);
simulatormfc=electrode.electrodeCFG;

availableElectrodes=dir('Electrodes');
str=[];
for i=1:length(availableElectrodes)
	if(~availableElectrodes(i).isdir)
		[pathstr,name,ext,versn]=fileparts(availableElectrodes(i).name);
		if(strcmp(ext,'.cfg'))
			str{end+1}=name;
			%open the file
			fullFilePath=fullfile(cd,'Electrodes',availableElectrodes(i).name);
			fid=fopen(fullFilePath);
			if(fid~=-1)
				tline=fgetl(fid);
				while tline~=-1
					[field,count,errmsg,nextIndex]=sscanf(tline,'%s',1);
					if(isfield(simulatormfc,field))
						tline=tline(nextIndex:end);
						[equalSign,count,errmsg,nextIndex]=sscanf(tline,'%s',1);
						value=tline(nextIndex:end);
						%value=strtrim(value);
                        value=strjust(value,'left');
		                value=deblank(value);
						%value=deblank(value);
						if(value(end)==';')
							value=value(1:end-1);
						end
						if (value(1)=='"')
							value=value(2:end-1);
							value=regexprep(value,'\\\','\\');
							fieldstruct=getfield(simulatormfc,field);
							fieldstruct.value=value;
							simulatormfc=setfield(simulatormfc,field,fieldstruct);
						else
							fieldstruct=getfield(simulatormfc,field);
							fieldstruct.value=value;
							simulatormfc=setfield(simulatormfc,field,fieldstruct);
						end
					end

					tline=fgetl(fid);
				end
			end
			fclose(fid);
			newelectrode=electrode;
			newelectrode.electrodeName=name;
			newelectrode.electrodeCFG=simulatormfc;
			electrodes(length(str))=newelectrode;

		end
	end
end
if(~isempty(str))
% 	str{end+1}='__________';
	str{end+1}='Custom...';
	userData.electrodes=electrodes;
	set(electrodeNameH,'UserData',userData);
	set(electrodeNameH,'String',str);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%editElectrode
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function editElectrode(src,evnt)
userData=get(gcbo,'UserData');
electrodeNameH=userData.electrodeNameH;
newElectrode(electrodeNameH);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%changeContraction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function changeContraction(src,evnt)
strValues=get(gcbo,'String');
value=get(gcbo,'value');
currentSelection=strValues(value,:);
userData=get(gcbo,'UserData');
contractions=userData.contractions;
contractionHandles=userData.contractionHandles;
switch (currentSelection{1})
	case 'Add...'
		for i=1:value;
			str{i}=num2str(i);
		end
		str{end+1}='Add...';
		set(gcbo,'String',str);
	
        newcontraction=contractions(end);
		newcontraction.contractionLevelAsPercentMVC=get(contractionHandles.MVCH,'String');
		%newcontraction.MVC=get(contractionHandles.MVCH,'String');
% 		newcontraction.needle_x_position=get(contractionHandles.positionXH,'String');
% 		newcontraction.needle_y_position=get(contractionHandles.positionYH,'String');
% 		newcontraction.needle_z_position=get(contractionHandles.positionZH,'String');
% 		newcontraction.electrodeIndex=get(contractionHandles.contractionElectrodeH,'Value');
		contractions(end+1)=newcontraction;
		userData.contractions=contractions;
		set(contractionHandles.deleteButtonH,'vis','on');
		set(gcbo,'UserData', userData);
	otherwise
		set(contractionHandles.MVCH,'String',contractions(value).contractionLevelAsPercentMVC);
		currentElectrodeIndex=get(contractionHandles.contractionElectrodeH,'Value');
		
		set(contractionHandles.positionXH,'String',contractions(value).needle_x_position(currentElectrodeIndex));
		set(contractionHandles.positionYH,'String',contractions(value).needle_y_position(currentElectrodeIndex));
		set(contractionHandles.positionZH,'String',contractions(value).needle_z_position(currentElectrodeIndex));
		%set(contractionHandles.contractionElectrodeH,'Value',contractions(value).electrodeIndex);
		
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%deleteContraction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function deleteContraction(src,evnt)
contractionH=get(gcbo,'UserData');

%get the existing contractions
userData=get(contractionH,'UserData');
contractions=userData.contractions;
%if there are more than one electrodes
if(length(contractions)>1)
	%get the number of the selected electrode
	selectedContraction=get(contractionH,'value');
	for i=selectedContraction:length(contractions)-1
		contractions(i)=contractions(i+1);
	end
	contractions=contractions(1:end-1);
	for i=1:length(contractions)
		str{i}=num2str(i);
	end
	
	str{end+1}='Add...';
	if(selectedContraction>1)
		newSelectedValue=selectedContraction-1;
	else
		newSelectedValue=1;
	end
	userData.contractions=contractions;
	contractionHandles=userData.contractionHandles;
	currentElectrodeIndex=get(contractionHandles.contractionElectrodeH,'Value');
	set(contractionHandles.MVCH,'String',contractions(newSelectedValue).contractionLevelAsPercentMVC);
	set(contractionHandles.positionXH,'String',contractions(newSelectedValue).needle_x_position(currentElectrodeIndex));
	set(contractionHandles.positionYH,'String',contractions(newSelectedValue).needle_y_position(currentElectrodeIndex));
	set(contractionHandles.positionZH,'String',contractions(newSelectedValue).needle_z_position(currentElectrodeIndex));
	%set(contractionHandles.contractionElectrodeH,'Value',contractions(newSelectedValue).electrodeIndex);
	set(contractionH,'String',str);
	set(contractionH,'Value',newSelectedValue);
	set(contractionH,'UserData',userData);
	if(length(contractions)<2)
		set(gcbo,'Visible','off');
	end
	
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%updateContraction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function updateContraction(src,evnt)
contractionH=get(gcbo,'UserData');
fieldName=get(gcbo,'Tag');
userData=get(contractionH,'UserData');
contractionValue=get(contractionH,'value');
contractions=userData.contractions;
newcontraction=contractions(contractionValue);
style=get(gcbo,'Style');
strValue=[];
switch (style)
	case 'popupmenu'
		 strValue=get(gcbo,'Value');
	case 'edit'
		strValue=get(gcbo,'String');
end
newcontraction=setfield(newcontraction,fieldName,strValue);
contractions(contractionValue)=newcontraction;
userData.contractions=contractions;
set(contractionH,'UserData',userData);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%runSimulator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function runSimulator(src,evnt)
f=gcbf;
pos=get(f,'pos');
screenPos=get(0,'ScreenSize');
pos(2)=screenPos(4)-pos(2)-pos(4);
%commandwindow;
contractionH=get(gcbo,'UserData');
userData=get(contractionH,'UserData');
contractions=userData.contractions;
contractionHandles=userData.contractionHandles;
contractionElectrodeH=contractionHandles.contractionElectrodeH;
figureUserData=get(f,'UserData');
simulatormfc=figureUserData.simulatormfc;

%Save the preferences
preferences=figureUserData.preferences;
fid=fopen('simulator.prefs','w');
fields=fieldnames(preferences);
for i=1:length(fields);
	fprintf(fid,'%s %s\n',fields{i},getfield(preferences,fields{i}));
end
fclose(fid);


%get the duration of the signal
signalDurationH=findobj(f,'Tag','emg_elapsed_time');
signalTime=str2num(get(signalDurationH,'String'))-1;
simulatormfc.emg_elapsed_time.value=num2str(signalTime);

%multi Channel
multipleElectrodesH=findobj(f,'Tag','MultipleElectrodes');
multipleElectrodes=get(multipleElectrodesH,'Value');

if(multipleElectrodes)
	electrodePopupsH=get(multipleElectrodesH,'UserData');
	electrodeNumUD=get(electrodePopupsH.electrodeNumH,'UserData');
	numOfElectrodes=length(electrodeNumUD.electrodeIndexArray);
else
	numOfElectrodes=1;
end


curDir=cd;
tempDirectory=fullfile(curDir,'temp');
matlabVersion=version;
%for every contraction write the simulator.cfg file and execute the program
if(str2num(matlabVersion(1))<7)
waitbarH=waitbar(0,'');
set(waitbarH,'Vis','on','WindowStyle','modal','Name','Please wait...');
end
for iContraction=1:length(contractions)
	ann.time=[];
	ann.unit=[];
	ann.uncertainty=[];
	ann.chan=[];
	ann.instance=[];
	simulatormfc.contractionLevelAsPercentMVC.value=contractions(iContraction).contractionLevelAsPercentMVC;
	for iElectrode=1:numOfElectrodes
		
		simulatormfc.needle_x_position.value=num2str(contractions(iContraction).needle_x_position(iElectrode));
		simulatormfc.needle_y_position.value=num2str(contractions(iContraction).needle_y_position(iElectrode));
		simulatormfc.needle_z_position.value=num2str(contractions(iContraction).needle_z_position(iElectrode));
		
		   % get the electrode values
		   electrodeNumH=findobj(f,'Tag','electrodeNum');
		   electrodeData=get(electrodeNumH,'userData');
		   electrodeIndexArray=electrodeData.electrodeIndexArray;
		   electrodeH=findobj(f,'Tag','electrodeName');
		   electrodeData=get(electrodeH,'userData');
		
		   currentElectrode=electrodeData.electrodes(electrodeIndexArray(iElectrode));
		   currentElectrode=currentElectrode.electrodeCFG;
		   simulatormfc.electrode_type.value=currentElectrode.electrode_type.value;
		   simulatormfc.canPhysicalRadius.value=currentElectrode.canPhysicalRadius.value;
		   simulatormfc.cannula_length.value=currentElectrode.cannula_length.value;
		   simulatormfc.needleReferenceSetup.value=currentElectrode.needleReferenceSetup.value;
		   simulatormfc.minimumMuscleMetricThreshold.value=currentElectrode.minimumMuscleMetricThreshold.value;
		   simulatormfc.signalToNoiseRatio.value=currentElectrode.signalToNoiseRatio.value;
		   if(currentElectrode.signalToNoiseRatio.value>0)
			   simulatormfc.use_noise.value='1';
		   else
			   simulatormfc.use_noise.value='0';
		   end
		
		
		
		
			newFileLine=[];
		    fid=fopen('simulator.cfg','r');
		    tline=fgetl(fid);
			while tline~=-1
				[field,count,errmsg,nextIndex]=sscanf(tline,'%s',1);
				if(((iContraction>1)|(iElectrode>1))&(strcmp(field,'LAST_OUTPUT')))
				else
					if(isfield(simulatormfc,field))
						[equalSign,count,errmsg,nextIndex]=sscanf(tline,'%s',2);
						value=tline(nextIndex:end);
						%value=strtrim(value);
                        value=strjust(value,'left');
		                value=deblank(value);
						tline=tline(1:nextIndex);
		
						if (value(1)=='"')
							s=getfield(simulatormfc,field);
							s=s.value;
							s=regexprep(s,'\\','\\\');
							tline=[tline,'"',s,'"',';'];
						else
							s=getfield(simulatormfc,field);
							s=s.value;
							tline=[tline,s,';'];
						end
					end
		        end
					newFileLine{end+1}=tline;
					tline=fgetl(fid);
		
			end
		
		
			fclose(fid);
		
			fid=fopen('simulator.cfg','w');
		
			for i=1:length(newFileLine)
				fprintf(fid,'%s\n',newFileLine{i});
		
			end
			fclose(fid);
			curDir=cd;
			%set(waitbarH,'vis','on');
			
			waitMessage=['Simulating Channel ',num2str(iElectrode),...
				' of ',num2str(numOfElectrodes), ' for Contraction ',num2str(iContraction),...
				' of ',num2str(length(contractions))];
			
			
            
			
			logFilePath=fullfile(curDir,'temp','simulator.log');
			logFileCPath=strrep(logFilePath, '\','\\');
            if(str2num(matlabVersion(1))>6)
                j=spm.ProgressBar(waitMessage,round((iElectrode-1+(iContraction-1)*numOfElectrodes)*100/(numOfElectrodes*length(contractions))));
                j.createAndShowGUI(pos(1),pos(2),pos(3),pos(4),waitMessage,logFileCPath,round((iElectrode-1+(iContraction-1)*numOfElectrodes)*100/(numOfElectrodes*length(contractions))));
            else
                waitbar((iElectrode-1+(iContraction-1)*numOfElectrodes)/(numOfElectrodes*length(contractions)),waitbarH,waitMessage);
            end
			drawnow;
			
			if(ispc)
				cd('PC')
				if((iElectrode>1))
					runstring=['simtext ','-configuration-dir=','"',curDir,'"',' ','-data-root=','"',tempDirectory,'"',' ','-useLastMuscle -useOldFiringTimes -skip-confirm -nowait-for-key -runOnce >logFile.txt'];
				elseif(iContraction>1)
					runstring=['simtext ','-configuration-dir=','"',curDir,'"',' ','-data-root=','"',tempDirectory,'"',' ','-useLastMuscle -skip-confirm -nowait-for-key -runOnce >logFile.txt'];
				else
					runstring=['simtext ','-configuration-dir=','"',curDir,'"',' ','-data-root=','"',tempDirectory,'"',' ','-skip-confirm -nowait-for-key -runOnce >logFile.txt'];
				end
				%runstring=['!',runstring,' &'];
				%eval(runstring);
                if(str2num(matlabVersion(1))<7)
                    runstring=runstring(1:end-12);
                end
				system(runstring);

			elseif(isunix)
				cd('MAC')
				if((iElectrode>1))
					runstring=['./simtext ','-configuration-dir=','"',curDir,'"',' ','-data-root=','"',tempDirectory,'"',' ','-useLastMuscle -useOldFiringTimes -skip-confirm -nowait-for-key -runOnce >logFile.txt'];
				elseif(iContraction>1)
					runstring=['./simtext ','-configuration-dir=','"',curDir,'"',' ','-data-root=','"',tempDirectory,'"',' ','-useLastMuscle -skip-confirm -nowait-for-key -runOnce >logFile.txt'];
				else
					runstring=['./simtext ','-configuration-dir=','"',curDir,'"',' ','-data-root=','"',tempDirectory,'"',' ','-skip-confirm -nowait-for-key -runOnce >logFile.txt'];
				end
				if(str2num(matlabVersion(1))<7)
                    runstring=runstring(1:end-12);
                end
                    
				system(runstring);
			end
		
		   
           if(str2num(matlabVersion(1))>6)
              %Java version
              j.stop
           else
              % no java version
              waitbar((iElectrode+(iContraction-1)*numOfElectrodes)/(numOfElectrodes*length(contractions)),waitbarH,waitMessage);
           end
           
			drawnow;
		 	ann=RWDFiles(preferences,iContraction,iElectrode,tempDirectory,ann);
           if(str2num(matlabVersion(1))>6)
              recycle(logFilePath);
           else
               delete(logFilePath);
           end
			%recycle(logFilePath);
		 	cd(curDir);
			
	end
	
	if(str2num(preferences.allUnits))
	ann=addMissingUnits(ann);
	else
    ann = createAnnotation(ann);
	end
	indexOftheFile=num2str(iContraction);
	if(length(indexOftheFile)<2)
		indexOftheFile=['0',indexOftheFile];
	end
	newDataFileName=[preferences.outputFileName,indexOftheFile,'.eaf'];
	newDataFileName=fullfile(preferences.DataDirectory,newDataFileName);
	eaf_save(newDataFileName,ann);
end
if(str2num(matlabVersion(1))<7)
close(waitbarH);
end
figure(f);
messageString1=['EMG and Annotation files created in: ',preferences.DataDirectory];
messageString=strrep(messageString1, '\','\\');
messageString=[messageString,'\n'];
fprintf(messageString);

removeDirectory=fullfile(tempDirectory,'run000');
rmdir(removeDirectory,'s');
writeHeaders(preferences,length(contractions),numOfElectrodes)
drawnow;
msgBoxH=msgbox(messageString1,'Done','modal');

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%RWDFiles
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function ann= RWDFiles(preferences,iContraction,iElectrode,tempDirectory,ann)
global realUnits
curDir=cd;
dataDirectory=preferences.DataDirectory;

cd(tempDirectory);
%newDataFileName=[preferences.outputFileName,num2str(iContraction*iElectrode)];
indexOftheFile=num2str(iContraction);
if(length(indexOftheFile)<2)
	indexOftheFile=['0',indexOftheFile];
end
if(iElectrode==1)
	newDataFileName=[preferences.outputFileName,indexOftheFile];
else
	newDataFileName=[preferences.outputFileName,indexOftheFile,'C',num2str(iElectrode)];
end
fid=fopen('simulator.log');
if(fid~=-1)
	tline=fgetl(fid);
	while ~strcmp(tline,'Output gathered into file:')
		tline=fgetl(fid);
	end
    
	%dataFile=strtrim(fgetl(fid));
    dataFile=strjust(fgetl(fid),'left');
    dataFile=deblank(dataFile);
    %dataFile=deblank(fgetl(fid));
	if(exist(dataFile,'file')==2)
	newDataFile=[newDataFileName,'.dat'];
	newDataFile=fullfile(dataDirectory,newDataFile);
	copyfile(dataFile,newDataFile,'f');
	
	[pathstr,name,ext,ver]=fileparts(dataFile);
	gstFile=[name,'.gst'];
	gstFile=fullfile(pathstr,gstFile);
	if(exist(gstFile,'file')==2)
		[ann1,s,f]=eaf_load_gst(gstFile);
		ann1.instance=instance(ann1.unit');
		if(s==0)
			eafFile=[newDataFileName,'.eaf'];
			eafFile=fullfile(dataDirectory,eafFile);
			%s=eaf_save(eafFile,ann1);
		end
		indexOfFile=name(6:end);
		%mapFileName=['gst_mu_map',num2str(iElectrode),'.dat'];
		mapFileName=['gst_mu_map',indexOfFile,'.dat'];
		mapFile=fullfile(pathstr,mapFileName);
		
		realUnits=load(mapFile);
		if(~isempty(realUnits))
		realUnits=realUnits(:,1)';
		ann1.unit=ann1.unit';
		ann1.unit=realUnits(ann1.unit);
	    ann1.unit=ann1.unit';
		end
		ann1.chan(1:length(ann1.chan))=iElectrode;
		ann1.chan=ann1.chan';
		ann.time=[ann.time',ann1.time'];
		ann.time=ann.time';
		ann.unit=[ann.unit',ann1.unit'];
		ann.unit=ann.unit';
		ann.uncertainty=[ann.uncertainty',ann1.uncertainty'];
		ann.uncertainty=ann.uncertainty';
		ann.chan=[ann.chan',ann1.chan];
		ann.chan=ann.chan';
		ann.instance=[ann.instance,ann1.instance];
	end

	
	end
	
	fclose(fid);
	


	
end
cd(curDir);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%writeHeaders(preferences,numContractions,numElectrodes)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function writeHeaders(preferences,numContractions,numElectrodes)
curDir=cd;
dataDirectory=preferences.DataDirectory;
cd(dataDirectory);
for i=1:numContractions
indexOfFile=num2str(i);
if(length(indexOfFile)<2)
	indexOfFile=['0',indexOfFile];
end
fileName=[preferences.outputFileName,indexOfFile];
newHeader=[fileName,'.hea'];
fid=fopen(newHeader,'w');
if(fid~=-1)
	fprintf(fid,'%s %s %s\n',fileName, num2str(numElectrodes),'31250');
	fprintf(fid,'%s %s\n',[fileName,'.dat'],'16+22');
	for iElectrode=2:numElectrodes
		fprintf(fid,'%s %s\n',[preferences.outputFileName,indexOfFile,'C',num2str(iElectrode),'.dat'],'16+22');
	end
fclose(fid);
		
end
end
cd(curDir);

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%updatePrefs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function updatePrefs(src,evnt)
simFig=get(gcbo,'UserData');
figureData=get(simFig,'UserData');
preferences=figureData.preferences;
str=num2str(get(gcbo,'String'));
if(~isempty(str))
preferences=setfield(preferences,get(gcbo,'Tag'),str);
figureData.preferences=preferences;
set(simFig,'UserData',figureData);
end

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%updateContractonEletrodes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function updateContractionElectrodes(electrodeNumH)
userData=get(electrodeNumH,'UserData');
electrodeHandles=userData.electrodeHandles;
electrodeNameH=electrodeHandles.electrodeNameH;
strValues=get(electrodeNameH,'String');
electrodeIndexArray=userData.electrodeIndexArray;
parentF=get(electrodeNumH,'Parent');
h=findobj(parentF,'Tag','electrodeIndex');
if(ishandle(h))
	multipleElectrodesH=findobj(parentF,'Tag','MultipleElectrodes');
	multipleElectrodes=get(multipleElectrodesH,'Value');
	if(multipleElectrodes)
		for i=1:length(electrodeIndexArray)
			temp=strValues(electrodeIndexArray(i),:);
			str{i}=[num2str(i),'-',temp{1}];
		end
	else
		temp=strValues(electrodeIndexArray(1),:);
		str{1}=['1-',temp{1}];
		set(h,'Value',1);
	end
	set(h,'String',str);
end

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%setElectrodePosition
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function setElectrodePosition(src,evnt)
contractionNumH=get(gcbo,'UserData');
contractionUserData=get(contractionNumH,'UserData');
contractionHandles=contractionUserData.contractionHandles;
contractions=contractionUserData.contractions;
currentContractionIndex=get(contractionNumH,'Value');
currentContraction=contractions(currentContractionIndex);
currentElectrode=get(contractionHandles.contractionElectrodeH,'Value');
field=get(gcbo,'Tag');
temp=getfield(currentContraction,field);
temp(currentElectrode)=str2num(get(gcbo,'String'));
currentContraction=setfield(currentContraction,field,temp);
contractions(currentContractionIndex)=currentContraction;
contractionUserData.contractions=contractions;
set(contractionNumH,'UserData',contractionUserData);
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%getElectrodePosition
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function getElectrodePosition(src,evnt)
contractionElectrodeH=gcbo;
contractionElectrodeUserData=get(contractionElectrodeH,'UserData');
contractionHandles=contractionElectrodeUserData.contractionHandles;
currentContractionIndex=get(contractionHandles.contractionNumH,'Value');
contractionUserData=get(contractionHandles.contractionNumH,'UserData');
contractions=contractionUserData.contractions;
currentContraction=contractions(currentContractionIndex);
currentElectrodeIndex=get(contractionElectrodeH,'Value');

set(contractionHandles.positionXH,'String',num2str(currentContraction.needle_x_position(currentElectrodeIndex)));
set(contractionHandles.positionYH,'String',num2str(currentContraction.needle_y_position(currentElectrodeIndex)));
set(contractionHandles.positionZH,'String',num2str(currentContraction.needle_z_position(currentElectrodeIndex)));		

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%selectMuscle
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function selectMuscle(src,evnt)
f=gcbf;
selectedValue=get(gcbo,'Value');
str=get(gcbo,'String');
selectedStr=str(selectedValue,:);
switch (selectedStr{1})
	case 'Custom...'
% 		electrode=struct(...
% 	      'electrodeName','Generic',...
% 	      'electrodeCFG',simulatormfc);
		
		 newMuscle(f,gcbo);
		
% 	case '__________'
% 		
% 		value=get(gcbo,'Value');
% 		set(gcbo,'Value',value+1);
% 		
% 		 newMuscle(f,gcbo);
		 
	otherwise
		figUserData=get(f,'UserData');
		muscles=get(gcbo,'UserData');
		figUserData.simulatormfc=muscles(selectedValue).muscleCFG;
		set(f,'UserData',figUserData);
		

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%loadAvailableMuscles
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function loadAvailableMuscles(muscleNameH);
parentf=get(muscleNameH,'parent');
userData=get(muscleNameH,'userData');
muscle=userData(1);
simulatormfc=muscle.muscleCFG;

availableMuscles=dir('Muscles');
str=[];

for i=1:length(availableMuscles)
	if(~availableMuscles(i).isdir)
		[pathstr,name,ext,versn]=fileparts(availableMuscles(i).name);
		if(strcmp(ext,'.cfg'))
			str{end+1}=name;
			%open the file
			fullFilePath=fullfile(cd,'Muscles',availableMuscles(i).name);
			fid=fopen(fullFilePath);
			if(fid~=-1)
				tline=fgetl(fid);
				while tline~=-1
					[field,count,errmsg,nextIndex]=sscanf(tline,'%s',1);
					if(isfield(simulatormfc,field))
						tline=tline(nextIndex:end);
						[equalSign,count,errmsg,nextIndex]=sscanf(tline,'%s',1);
						value=tline(nextIndex:end);
						%value=strtrim(value);
                        value=strjust(value,'left');
		                value=deblank(value);
						%value=deblank(value);
						if(value(end)==';')
							value=value(1:end-1);
						end
						if (value(1)=='"')
							value=value(2:end-1);
							value=regexprep(value,'\\\','\\');
							fieldstruct=getfield(simulatormfc,field);
							fieldstruct.value=value;
							simulatormfc=setfield(simulatormfc,field,fieldstruct);
						else
							fieldstruct=getfield(simulatormfc,field);
							fieldstruct.value=value;
							simulatormfc=setfield(simulatormfc,field,fieldstruct);
						end
					end

					tline=fgetl(fid);
				end
			end
			fclose(fid);
			newmuscle=muscle;
			newmuscle.muscleName=name;
			newmuscle.muscleCFG=simulatormfc;
			muscles(length(str))=newmuscle;

		end
	end

end
if(~isempty(str))
% 	str{end+1}='__________';
	str{end+1}='Custom...';
	userData=muscles;
	set(muscleNameH,'UserData',userData);
	set(muscleNameH,'String',str);
	figureUserData=get(parentf,'UserData');
	figureUserData.simulatormfc=muscles(1).muscleCFG;
	set(parentf,'UserData',figureUserData);
end

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%FUNCTIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%FILLIN
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function fillIn(f,parentf)

figureUserData=get(parentf,'UserData');
% get the simulatormfc structure
simulatormfc=figureUserData.simulatormfc;
h=findobj(f,'style','edit');
for i=1:length(h)
	field=get(h(i),'Tag');
	switch field
		case 'contractionLevelAsPercentMVC'
		case 'needle_x_position'
		case 'needle_y_position'
		case 'needle_z_position'
		otherwise
			if(isfield(simulatormfc,field))
				value=getfield(simulatormfc,field);
				value=value.value;
				set(h(i),'String',value);
			end
	end
end
h=findobj(f,'style','checkbox');
for i=1:length(h)
	field=get(h(i),'Tag');
	if(isfield(simulatormfc,field))
		value=getfield(simulatormfc,field);
		value=str2num(value.value);
		if(~isempty(value))
			set(h(i),'Value',value);
		end
	end
end
h=findobj(f,'style','popupmenu');
for i=1:length(h)
	field=get(h(i),'Tag');
	if(isfield(simulatormfc,field))
		value=getfield(simulatormfc,field);
		value=str2num(value.value);
		if(~isempty(value))
			set(h(i),'Value',value);
		end
	end
end

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%LOADCFGFILE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function loadCFGFile(src,evnt,simulator)
if nargin<3
% get the callback figure
simulator=gcbf;
figureUserData=get(simulator,'UserData');
% get the simulatormfc structure
simulatormfc=figureUserData.simulatormfc;


%Get the file
[fileName,pathName,filterIndex] = uigetfile('.cfg');
fullFilePath=fullfile(pathName,fileName);
else
	%fullFilePath=fullfile(cd,'tempsimulator.cfg');
	figureUserData=get(simulator,'UserData');
    %get the simulatormfc structure
	fullFilePath=figureUserData.preferences.configFile;
    simulatormfc=figureUserData.simulatormfc;
end

%open the file
fid=fopen(fullFilePath);
if(fid~=-1)
	nameField=get(gcbo,'UserData');
	if(ishandle(nameField))
		[pathF,nameF,extF,versnF] =fileparts(fileName);
		set(nameField,'String',nameF);
	end
	tline=fgetl(fid);
	while tline~=-1
		[field,count,errmsg,nextIndex]=sscanf(tline,'%s',1);
		if(isfield(simulatormfc,field))
			tline=tline(nextIndex:end);
			[equalSign,count,errmsg,nextIndex]=sscanf(tline,'%s',1);
			value=tline(nextIndex:end);
			%value=strtrim(value);
            value=strjust(value,'left');
		    value=deblank(value);
            %value=deblank(value);
			if(value(end)==';')
				value=value(1:end-1);
			end
			if (value(1)=='"')
				value=value(2:end-1);
				value=regexprep(value,'\\\','\\');
				fieldstruct=getfield(simulatormfc,field);
				fieldstruct.value=value;
				simulatormfc=setfield(simulatormfc,field,fieldstruct);
			else
				fieldstruct=getfield(simulatormfc,field);
				fieldstruct.value=value;
				simulatormfc=setfield(simulatormfc,field,fieldstruct);
			end
		end

		tline=fgetl(fid);
	end
	fclose(fid);
	figureUserData.simulatormfc=simulatormfc;
	set(simulator,'UserData',figureUserData);
	fillIn(simulator,simulator);

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%checkValue
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function checkValue(src,evnt)
simulator=get(gcbo,'UserData');
figureUserData=get(simulator,'UserData');
simulatormfc=figureUserData.simulatormfc;
field=get(gcbo,'Tag');
style=get(gcbo,'style');
if(isfield(simulatormfc,field))
	if(strcmp(style,'edit'))

		fieldStruct=getfield(simulatormfc,field);
		fieldStruct.value=get(gcbo,'String');
		if (isempty(fieldStruct.range))
		elseif(length(fieldStruct.range)<2)
			if(str2num(fieldStruct.value)< fieldStruct.range)
				message=['The value should be greater than ', num2str(fieldStruct.range),' !'];
				h=warndlg(message);
			end
		else
			if((str2num(fieldStruct.value)< fieldStruct.range(1))&(str2num(fieldStruct.value)>fieldStruct.range(2)))
				message=['The value should be between ', num2str(fieldStruct.range(1)),' and ',num2str(fieldStruct.range(2)),' !'];
				h=warndlg(message);
			end

		end


	end
end
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Cancel
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function cancel(src,evnt)
delete(gcbf);





